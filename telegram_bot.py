# telegram_bot.py
import logging
import os
from pathlib import Path
from urllib.parse import urlparse

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ParseMode
from aiogram.utils.exceptions import InvalidQueryID, PhotoDimensions, TelegramAPIError
from dotenv import load_dotenv

# --- Load environment ---
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # full public URL e.g. https://your-app.onrender.com/
PORT = int(os.getenv("PORT", "10000"))

if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")
if not WEBHOOK_URL:
    raise RuntimeError("WEBHOOK_URL not set in .env ‚Äî required for webhook mode (Render)")

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Init bot & dispatcher ---
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- Directories ---
IMAGES_DIR = Path("images")
RESULTS_DIR = Path("results")
RESULTS_DIR.mkdir(exist_ok=True)

# --- States ---
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_onlyfans = State()
    quiz_waiting_answer = State()


# --- Helpers ---
def input_file_safe(path: Path | str):
    """Return InputFile if file exists, otherwise None."""
    if not path:
        return None
    p = Path(path)
    if p.exists():
        return InputFile(str(p))
    return None


async def safe_answer(cq: types.CallbackQuery):
    """Answer callback_query but ignore InvalidQueryID (too old) errors."""
    try:
        await cq.answer()
    except InvalidQueryID:
        logger.debug("CallbackQuery too old / already answered - ignoring.")
    except Exception as e:
        logger.exception("Unexpected error in cq.answer(): %s", e)


async def send_photo_with_fallback(chat_id: int, photo_path: Path | str, caption: str = None, reply_markup: InlineKeyboardMarkup | None = None, parse_mode: str | None = None):
    """
    Try to send as photo. If Telegram rejects with PhotoDimensions, send as document instead.
    """
    f = input_file_safe(photo_path)
    if not f:
        # if no file, fallback to simple message
        await bot.send_message(chat_id, caption or "", parse_mode=parse_mode, reply_markup=reply_markup)
        return

    try:
        await bot.send_photo(chat_id, photo=f, caption=caption, parse_mode=parse_mode, reply_markup=reply_markup)
    except PhotoDimensions:
        # fallback to document (works for very large images)
        logger.warning("Photo invalid dimensions ‚Äî sending as document instead: %s", photo_path)
        try:
            await bot.send_document(chat_id, document=f, caption=caption, parse_mode=parse_mode, reply_markup=reply_markup)
        except Exception as e:
            logger.exception("Failed to send document fallback: %s", e)
            # final fallback: send text only
            await bot.send_message(chat_id, caption or "", parse_mode=parse_mode, reply_markup=reply_markup)
    except TelegramAPIError as e:
        logger.exception("Telegram API error while sending photo: %s", e)
        # fallback to message
        await bot.send_message(chat_id, caption or "", parse_mode=parse_mode, reply_markup=reply_markup)


# ---------------- HANDLERS / FLOWS ----------------

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    welcome_img = IMAGES_DIR / "welcome.jpg"
    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ Eclipse Agency!</b> üåë\n\n"
        "–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –≥–∏–¥–æ–º –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ —Ä–æ–ª–∏ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, "
        "–∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–≤—è–∑—å, —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "<b>–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n"
        "üí∞ 20% –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂\n"
        "üïó –ì–∏–±–∫–∏–π 8-—á–∞—Å–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫\n"
        "üìÜ 1 –≤—ã—Ö–æ–¥–Ω–æ–π –≤ –Ω–µ–¥–µ–ª—é\n"
        "üí∏ –í—ã–ø–ª–∞—Ç—ã ‚Äî 7 –∏ 22 —á–∏—Å–ª–∞ (USDT)\n"
        "‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (~5%) –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º"
    )

    intro_text = (
        "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è?\n\n"
        "üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ ‚Äî –¥–æ 23% –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ KPI\n"
        "üë• –†–æ–ª—å Team Lead ‚Äî +1% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã (3 —á–µ–ª–æ–≤–µ–∫–∞)\n"
        "üéØ –ë–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî –≤—ã–ø–ª–∞—Ç—ã –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É\n"
        "üöÄ –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç ‚Äî –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è üëá"
    )
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚≠ê–ú–Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è‚≠ê", callback_data="agree_conditions")
    )

    file_ = input_file_safe(welcome_img)
    if file_:
        await send_photo_with_fallback(message.chat.id, welcome_img, caption=caption + "\n\n" + intro_text, reply_markup=kb, parse_mode=ParseMode.HTML)
    else:
        await bot.send_message(message.chat.id, caption + "\n\n" + intro_text, parse_mode=ParseMode.HTML, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "agree_conditions")
async def cb_agree_conditions(cq: types.CallbackQuery):
    await safe_answer(cq)

    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    warning_text = (
        "‚ùóÔ∏è–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –£—Å–ª–æ–≤–∏–µ –Ω–∏–∂–µ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π)!\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ä–µ—à–∏—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π "
        "—Å –º–æ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await bot.send_message(cq.from_user.id, warning_text)

    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç –Ω–µ –∑–∞–¥–∞—ë—Ç, –∞ –∂–¥—ë—Ç –æ—Ç–≤–µ—Ç)
    await bot.send_message(cq.from_user.id, "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ ‚Äî –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

    # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    await Form.waiting_for_name.set()


@dp.message_handler(state=Form.waiting_for_name, content_types=types.ContentTypes.TEXT)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)

    # Inline Yes/No buttons are now active and handled; but if you prefer to remove them entirely you can
    # replace this with a simple message and a single "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" button. For now we'll use inline Yes/No.
    text = f"–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, {name}! üåü\n\n{name}, —Ç—ã –∑–Ω–∞–∫–æ–º(-–∞) —Å —Ä–∞–±–æ—Ç–æ–π –Ω–∞ OnlyFans?"
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–î–∞", callback_data="onlyfans_yes"),
        InlineKeyboardButton("–ù–µ—Ç", callback_data="onlyfans_no")
    )
    await bot.send_message(message.chat.id, text, reply_markup=kb)
    await Form.waiting_for_onlyfans.set()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("onlyfans_"), state=Form.waiting_for_onlyfans)
async def cb_onlyfans_answer(cq: types.CallbackQuery, state: FSMContext):
    await safe_answer(cq)
    data = await state.get_data()
    name = data.get("name", "–¥—Ä—É–≥")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if cq.data == "onlyfans_yes":
        await bot.send_message(cq.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ, {name}! –¢–æ–≥–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ ‚úÖ")
    else:
        await bot.send_message(cq.from_user.id, f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, {name}, —è –≤—Å—ë –æ–±—ä—è—Å–Ω—é —Å –Ω—É–ª—è üòâ")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # ---- –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Ä–æ–∫: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ (–≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Ä—ë–º –∏–∑ images/) ----

    # 1) OnlyFans intro (photo or text)
    photo_onlyfans = IMAGES_DIR / "onlyfans_intro.jpg"
    caption1 = (
        "*OnlyFans* ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –ª—é–¥–∏ –∑–∞ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.\n\n"
        "–í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ —Ä–µ—á—å –∏–¥—ë—Ç –æ ¬´—Å–µ–∫—Å–µ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ¬ª, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π —Ç—ë–ø–ª–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ ‚Äî "
        "–æ –∂–∏–∑–Ω–∏, –º—ã—Å–ª—è—Ö, –∂–µ–ª–∞–Ω–∏—è—Ö.\n\n"
        "–î–∞, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ –¥–∞–≤–∞–π –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Å—Ç–Ω–æ: –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç—å –Ω–µ —Å—Ç–∞–Ω–µ—Ç. "
        "–¢—É—Ç –≤–∞–∂–Ω–æ –Ω–µ ¬´–∫–æ–Ω—Ç–µ–Ω—Ç¬ª, –∞ —Å–≤—è–∑—å –∏ –æ—â—É—â–µ–Ω–∏–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.\n\n"
        "–û–±–æ—Ä–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ‚Äî –¥–µ—Å—è—Ç–∫–∏ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –≥–æ–¥, –∞ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç –º–∏–ª–ª–∏–∞—Ä–¥–Ω—ã–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã, "
        "—Ç–∞–∫ —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å –¥–µ–Ω—å–≥–∞–º–∏ —Ç—É—Ç –∂–µ –∏ –∑–∞–∫—Ä–æ–µ–º. –î–µ–Ω—å–≥–∏ –∑–¥–µ—Å—å –µ—Å—Ç—å. –ò –∏—Ö –º–Ω–æ–≥–æ.\n\n"
        "–ù–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –º–æ–∂–µ—Ç –∏ –Ω–µ –≥–Ω–∞—Ç—å—Å—è –∑–∞ –≤—Å–µ–º –ø–∏—Ä–æ–≥–æ–ºü•ß, –∞ –æ—Ç—Ä–µ–∑–∞—Ç—å —Å–µ–±–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–æ–π–Ω—ã–π –∫—É—Å–æ–∫üí∏"
    )
    await send_photo_with_fallback(cq.from_user.id, photo_onlyfans, caption=caption1, parse_mode=ParseMode.MARKDOWN)

    # 2) Follow-up text + button "–î–∞–ª—å—à–µ"
    text2 = (
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ ‚Äî –∑–∞–ø–æ–º–Ω–∏ –≥–ª–∞–≤–Ω–æ–µ: —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞—ë—à—å –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç—ã –¥–∞—Ä–∏—à—å –ª—é–¥—è–º –æ—â—É—â–µ–Ω–∏–µ —Å—á–∞—Å—Ç—å—è üìå\n\n"
        "–° —Ç–∞–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º —Ç—ã –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±–æ–π–¥—ë—à—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –Ω–æ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å –Ω–∞—Å—Ç–æ—è—â—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã ü§ô\n\n"
        "–í –º–∏—Ä–µ –ø–æ–ª–Ω–æ –æ–¥–∏–Ω–æ–∫–∏—Ö –∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ª—é–¥–µ–π, –∏—â—É—â–∏—Ö —Ç–µ–ø–ª–æ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ üíî\n\n"
        "–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–∞—Ç—å –∏–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ª—é–±–æ–≤—å, –Ω–æ –º–æ–∂–µ–º –ø–æ–¥–∞—Ä–∏—Ç—å –∏–º –±–ª–∏–∑–æ—Å—Ç—å, —Å—Ç—Ä–∞—Å—Ç—å‚Ä¶ –Ω—É –∏, –∫–æ–Ω–µ—á–Ω–æ, –Ω—é–¥—Å—ã üòè\n\n"
        "–õ–∞–¥–Ω–æ, —Ö–≤–∞—Ç–∏—Ç –ª–∏—Ä–∏–∫–∏ ‚Äî –ø–æ–µ—Ö–∞–ª–∏ –¥–∞–ª—å—à–µ! üí•"
    )
    kb_next = InlineKeyboardMarkup().add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="of_next_1"))
    await bot.send_message(cq.from_user.id, text2, reply_markup=kb_next)


@dp.callback_query_handler(lambda c: c.data == "of_next_1")
async def of_next_1(cq: types.CallbackQuery):
    await safe_answer(cq)

    photo_of_people = IMAGES_DIR / "of_people.jpg"
    caption2 = (
        "üñº –ú–Ω–æ–≥–∏–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ Adult-–∏–Ω–¥—É—Å—Ç—Ä–∏—é —Ä–∞–¥–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞, –Ω–æ –∑–∞–±—ã–≤–∞—é—Ç –æ –≥–ª–∞–≤–Ω–æ–º ‚Äî –æ –ª—é–¥—è—Ö –ø–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É —ç–∫—Ä–∞–Ω–∞ ü•≤\n\n"
        "–í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –æ—Ç–¥–∞—ë—Ç –±–æ–ª—å—à–µ: –Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∞ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è.\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–ª–∞—Ç—è—Ç –Ω–µ –∑–∞ ¬´WOW¬ª, –∞ –∑–∞ —Ç—ë–ø–ª–æ–µ, –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ.\n\n"
        "OnlyFans ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∞ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å, –∫—É–¥–∞ –∑–∞—Ö–æ–¥—è—Ç –Ω–µ —Ç–æ–ª—å–∫–æ ¬´–≤—ã–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä¬ª, –Ω–æ –∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è ü´Ç\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ, –∞ –Ω–µ —Å—Ä—É–±–∏—Ç—å –±—ã—Å—Ç—Ä–æ –∏ —Å–≥–æ—Ä–µ—Ç—å ‚Äî –¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã —Å —Ç–æ–±–æ–π —Ö–æ—Ç–µ–ª–∏ –æ–±—â–∞—Ç—å—Å—è.\n\n"
        "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ ‚Äî –≤–æ—Ç —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–µ–Ω—å–≥–∏ üí∏\n\n"
        "–°–¥–µ–ª–∞–π –∂–∏–∑–Ω—å –∫–ª–∏–µ–Ω—Ç–∞ —á—É—Ç—å —è—Ä—á–µ, –∏ –æ–Ω —Ç–æ—á–Ω–æ —ç—Ç–æ –æ—Ü–µ–Ω–∏—Ç üòâ"
    )
    kb_next2 = InlineKeyboardMarkup().add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="of_next_2"))
    await send_photo_with_fallback(cq.from_user.id, photo_of_people, caption=caption2, reply_markup=kb_next2, parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda c: c.data == "of_next_2")
async def of_next_2(cq: types.CallbackQuery):
    await safe_answer(cq)

    text4 = (
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ, –∞ –Ω–µ —Å–∂–µ—á—å –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ä–∞–¥–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ ‚Äî "
        "–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã —Ñ–∞–Ω–∞–º –Ω—Ä–∞–≤–∏–ª–æ—Å—å –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π.\n\n"
        "–ö—Ç–æ-—Ç–æ –∏—â–µ—Ç —Å—Ç—Ä–∞—Å—Ç—å, –∫—Ç–æ-—Ç–æ ‚Äî —Ç–µ–ø–ª–æ.\n\n"
        "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ ‚Äî –≤–æ—Ç –ø—É—Ç—å –∫ –±–æ–ª—å—à–∏–º –¥–µ–Ω—å–≥–∞–º üí∏\n\n"
        "–°–¥–µ–ª–∞–π –∂–∏–∑–Ω—å –∫–ª–∏–µ–Ω—Ç–∞ —á—É—Ç–æ—á–∫—É –ª—É—á—à–µ ‚Äî –∏ –æ–Ω —Ç–æ—á–Ω–æ —ç—Ç–æ –æ—Ü–µ–Ω–∏—Ç üòâ"
    )
    kb_earn = InlineKeyboardMarkup().add(InlineKeyboardButton("‚≠ê –ê –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å? ‚≠ê", callback_data="how_to_earn"))
    await bot.send_message(cq.from_user.id, text4, reply_markup=kb_earn)


@dp.callback_query_handler(lambda c: c.data == "how_to_earn")
async def how_to_earn_info(cq: types.CallbackQuery):
    await safe_answer(cq)

    text1 = (
        "–ï—â—ë —Å–æ –≤—Ä–µ–º—ë–Ω –±—Ä–∞—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤ —è –Ω–∞—É—á–∏–ª—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç "
        "–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –ª—é–±—É—é –¥–µ—Ç–∞–ª—å –≤ —Ç–æ—á–∫—É –æ–ø–æ—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –¢—ã —Å–ø—Ä–æ—Å–∏—à—å –∫–∞–∫? –í—Å—ë –ø—Ä–æ—Å—Ç–æ:\n\n"
        "üîπ –£–∑–Ω–∞–ª –∏–º—è? ‚Äî –∑–∞–≥—É–≥–ª–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.\n"
        "üîπ –ï—â—ë –∏ —Ñ–∞–º–∏–ª–∏—é? ‚Äî –Ω–∞—à—ë–ª —Ñ–æ—Ç–æ, –∑–∞–∫–∏–Ω—É–ª —à—É—Ç–∫—É.\n"
        "üîπ –§–∞–Ω —Ä–∞—Å—Å–∫–∞–∑–∞–ª –≥–¥–µ –∂–∏–≤—ë—Ç? ‚Äî –∏–∑—É—á–∞—é –º–µ—Å—Ç–Ω—ã–µ —Ñ–∏—à–∫–∏.\n\n"
        "–õ—é–±–∞—è –º–µ–ª–æ—á—å ‚Äî –ø–æ–≤–æ–¥ –¥–ª—è —Å–±–ª–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞—Ç—å, –∞ –∑–∞–≤–æ–µ–≤–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ."
    )
    await bot.send_message(cq.from_user.id, text1)

    text2 = (
        "–¢—ã –±—É–¥–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ—Ç–Ω–∏ –∏—Å—Ç–æ—Ä–∏–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—å—é –∏ –∫–ª–∏–µ–Ω—Ç–æ–º üôå\n\n"
        "–ò–∑ —ç—Ç–æ–≥–æ —Ñ–æ—Ä–º—É–ª–∞ –ø—Ä–æ–¥–∞–∂–∏ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞:\n"
        "–ò–Ω—Ñ–æ –æ —Ñ–∞–Ω–∞—Ç–µ + –≤–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ = –ø—Ä–∏–±—ã–ª—å üìà"
    )
    await bot.send_message(cq.from_user.id, text2)

    text3 = (
        "–ü–∏—à–∏ –∫–ª–∏–µ–Ω—Ç–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏. "
        "–ö–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø–æ—è–≤—è—Ç—Å—è ‚Äî –æ–Ω–∏ –≤—Å–ø–æ–º–Ω—è—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è ‚ù§Ô∏è‚Äçü©π"
    )
    kb_next = InlineKeyboardMarkup().add(InlineKeyboardButton("‚≠ê –ì–¥–µ –∏ –∫–∞–∫ –∏—Å–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤? ‚≠ê", callback_data="find_clients"))
    await bot.send_message(cq.from_user.id, text3, reply_markup=kb_next)


@dp.callback_query_handler(lambda c: c.data == "find_clients")
async def find_clients_info(cq: types.CallbackQuery):
    await safe_answer(cq)

    photo_path = IMAGES_DIR / "find_clients.jpg"
    caption1 = (
        "üñº –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –Ω–∞ —Ä—ã–±–∞–ª–∫–µ: —É–ª–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–∂–∏–≤–∫–∏. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ ‚Äî —ç—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ñ–∞–Ω–∞–º.\n\n"
        "–§–∞–Ω —É–∂–µ –≤–∏–¥–µ–ª —Å–æ—Ç–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –∫–ª—é–Ω—É–ª –Ω–∞ —Ç–≤–æ—ë üé£\n\n"
        "–î–æ–±–∞–≤–ª—è–π —Å–ª–µ–Ω–≥, —Å–æ–∫—Ä–∞—â–∞–π, –º–µ–Ω—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –∂–∏–≤–æ –∏ –ø–æ-—Å–≤–æ–µ–º—É."
    )
    await send_photo_with_fallback(cq.from_user.id, photo_path, caption=caption1)

    text2 = (
        "–î–∞, OnlyFans ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –ø—Ä—è–º—ã–º–∏ –∏–ª–∏ –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–º–∏ üîû\n\n"
        "–û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π —Å–ø–∞–º –±—ã—Å—Ç—Ä–æ —É–±–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å. –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–Ω–æ—Å—è—Ç –≤–∞—Å –≤ —Å–ø–∏—Å–æ–∫ ¬´–µ—â—ë –æ–¥–Ω–æ–π —à–ª—é—Ö–∏¬ª ‚Äî "
        "–∞ —Ç–∞–∫–∏–µ –Ω–µ —Ü–µ–ø–ª—è—é—Ç –∏ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –∂–µ–ª–∞–Ω–∏—è –ø–ª–∞—Ç–∏—Ç—å üí∏\n\n"
        "–†–∞–±–æ—Ç–∞–π —Ç–æ–Ω–∫–æ: –ª—ë–≥–∫–∞—è —ç—Ä–æ—Ç–∏–∫–∞, –Ω–∞–º—ë–∫–∏, –∏–≥—Ä–∞ —Å –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."
    )
    await bot.send_message(cq.from_user.id, text2)

    text3 = (
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º 3 —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n"
        "‚úîÔ∏è VIP ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º\n"
        "‚úîÔ∏è –û–Ω–ª–∞–π–Ω ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ —Å–µ—Ç–∏\n"
        "‚úîÔ∏è –ú–∞—Å—Å–æ–≤–∞—è ‚Äî –æ—Ö–≤–∞—Ç –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫—Ä–æ–º–µ VIP\n\n"
        "–ö–∞–∂–¥—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî —ç—Ç–æ —Å–≤–æ–π –ø–æ–¥—Ö–æ–¥ –∏ —à–∞–Ω—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É."
    )
    kb_diff = InlineKeyboardMarkup().add(InlineKeyboardButton("üí° –ó–∞—á–µ–º –Ω—É–∂–Ω—ã —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏?", callback_data="diff_mailings"))
    await bot.send_message(cq.from_user.id, text3, reply_markup=kb_diff)


@dp.callback_query_handler(lambda c: c.data == "diff_mailings")
async def diff_mailings_info(cq: types.CallbackQuery):
    await safe_answer(cq)

    # VIP
    photo_vip = IMAGES_DIR / "vip_clients.jpg"
    caption_vip = (
        "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ–¥ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ üí¨\n\n"
        "VIP-–∫–ª–∏–µ–Ω—Ç–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω–∏ –ø–ª–∞—Ç—è—Ç –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ, –∞ –Ω–µ –∑–∞ —à–∞–±–ª–æ–Ω."
    )
    await send_photo_with_fallback(cq.from_user.id, photo_vip, caption=caption_vip, parse_mode=ParseMode.MARKDOWN)

    # ONLINE
    photo_online = IMAGES_DIR / "online_clients.jpg"
    caption_online = (
        "–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω ‚Äî —ç—Ç–æ –ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –¶–µ–ø–ª—è–π—Å—è –∑–∞ –Ω–∏–∫/–∞–≤–∞—Ç–∞—Ä ‚Äî —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏."
    )
    await send_photo_with_fallback(cq.from_user.id, photo_online, caption=caption_online)

    # MASS + two buttons
    photo_mass = IMAGES_DIR / "mass_message.jpg"
    caption_mass = (
        "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ª–µ—Ç–∏—Ç –≤—Å–µ–º ‚Äî –¥–µ–ª–∞–π –µ—ë —Ü–µ–ø–ª—è—é—â–µ–π, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤–æ–π. "
        "–§–∞–Ω —É–≤–∏–¥–∏—Ç ~25 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî —Å—Ç–∞–≤—å —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –≤ –Ω–∞—á–∞–ª–æ."
    )
    kb_mass = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üòè –Ø –≤—Å—ë –ø–æ–Ω—è–ª", callback_data="understood"),
        InlineKeyboardButton("‚òùÔ∏è –ú–æ–∂–Ω–æ –µ—â—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?", callback_data="more_info")
    )
    await send_photo_with_fallback(cq.from_user.id, photo_mass, caption=caption_mass, reply_markup=kb_mass, parse_mode=ParseMode.MARKDOWN)


# Small example handlers for understood / more_info to keep flow consistent
@dp.callback_query_handler(lambda c: c.data == "understood")
async def cb_understood(cq: types.CallbackQuery):
    await safe_answer(cq)
    await bot.send_message(cq.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ. /menu (–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ –∫–Ω–æ–ø–∫–∞–º).")


@dp.callback_query_handler(lambda c: c.data == "more_info")
async def cb_more_info(cq: types.CallbackQuery):
    await safe_answer(cq)
    await bot.send_message(cq.from_user.id, "–•–æ—á–µ—à—å –µ—â—ë –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤? –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å.")


# Example: questions_start -> –ü–û / –ö–æ–º–∞–Ω–¥–∞ flow
@dp.callback_query_handler(lambda c: c.data == "questions_start")
async def cb_questions_start(cq: types.CallbackQuery):
    await safe_answer(cq)
    uid = cq.from_user.id
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üåü–ü–û", callback_data="soft_first"),
        InlineKeyboardButton("üåü–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞", callback_data="teamwork_first")
    )
    caption = "–¢–µ–ø–µ—Ä—å –æ–±—Å—É–¥–∏–º –ü–û –∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É ü§ñ"
    photo = IMAGES_DIR / "teamwork.jpg"
    await send_photo_with_fallback(uid, photo, caption=caption, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "teamwork_first")
async def teamwork_first(callback: types.CallbackQuery):
    await safe_answer(callback)
    text = (
        "ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –æ—Å–Ω–æ–≤–∞ —É—Å–ø–µ—Ö–∞.\n\n"
        "üîπ –î–æ–≤–µ—Ä–∏–µ ‚Äî –≤—ã–ø–æ–ª–Ω—è–π –æ–±–µ—â–∞–Ω–∏—è.\nüîπ –û–±—â–µ–Ω–∏–µ ‚Äî —Ä–µ—à–∞–π –≤–æ–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É.\nüîπ –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ ‚Äî –¥–µ–ª–∏—Å—å –æ–ø—ã—Ç–æ–º."
    )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üü© –ê —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –ü–û", callback_data="soft_second"))
    # try edit message, if not possible ‚Äî send new
    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except Exception:
        await bot.send_message(callback.from_user.id, text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "soft_first")
async def soft_first(callback: types.CallbackQuery):
    await safe_answer(callback)
    text = (
        "üü© –î–ª—è —Ä–∞–±–æ—Ç—ã –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Onlymonster.\n\n"
        "üíª –°–∫–∞—á–∞–π: https://onlymonster.ai/downloads\n"
        "‚ö†Ô∏è –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è ‚Äî –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É.\n\n"
        "üí∏ –£—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö: –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã."
    )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("ü§ù –ê —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –∫–æ–º–∞–Ω–¥–µ", callback_data="teamwork_second"))
    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except Exception:
        await bot.send_message(callback.from_user.id, text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "soft_second")
async def soft_second(callback: types.CallbackQuery):
    await safe_answer(callback)
    text = (
        "üü© Onlymonster ‚Äî –Ω–∞—à –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.\n\n"
        "üíª –°–∫–∞—á–∞–π: https://onlymonster.ai/downloads\n\n"
        "üí∏ –£—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–π –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω Google-–∞–∫–∫–∞—É–Ω—Ç."
    )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="final_question"))
    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except Exception:
        await bot.send_message(callback.from_user.id, text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "teamwork_second")
async def teamwork_second(callback: types.CallbackQuery):
    await safe_answer(callback)
    text = (
        "ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É.\n\n"
        "üîπ –î–æ–≤–µ—Ä–∏–µ\nüîπ –û–±—â–µ–Ω–∏–µ\nüîπ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n\n"
        "üí¨ –£–≤–∞–∂–∞–π –∫–æ–ª–ª–µ–≥ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å–≤—è–∑—å."
    )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="final_question"))
    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except Exception:
        await bot.send_message(callback.from_user.id, text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "final_question")
async def final_question(callback: types.CallbackQuery):
    await safe_answer(callback)
    q = "–ê —Ç–µ–ø–µ—Ä—å –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ —Ç—ã —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª:\n\nüôã –ö—É–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –∑–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã?"
    try:
        await callback.message.edit_text(q)
    except Exception:
        await bot.send_message(callback.from_user.id, q)


# Fallback message handler
@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /start. –ö–Ω–æ–ø–∫–∏ ‚Äî inline –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")


# ======================== Webhook startup/shutdown ========================

async def on_startup(dp: Dispatcher):
    try:
        await bot.delete_webhook()
        logger.info("Old webhook deleted (if existed).")
    except Exception:
        logger.debug("No previous webhook or failed to delete (ignored).")
    # set webhook
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to {WEBHOOK_URL}")


async def on_shutdown(dp: Dispatcher):
    logger.info("Shutting down...")
    try:
        await bot.delete_webhook()
    except Exception:
        logger.debug("Webhook deletion on shutdown failed (ignored).")
    try:
        await bot.close()
    except Exception:
        logger.debug("bot.close() failed (ignored).")


if __name__ == "__main__":
    parsed = urlparse(WEBHOOK_URL)
    webhook_path = parsed.path  # e.g. '/webhook/....'
    executor.start_webhook(
        dispatcher=dp,
        webhook_path=webhook_path,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host="0.0.0.0",
        port=PORT,
    )
