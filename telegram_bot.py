```python
import logging
import os
from pathlib import Path
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ParseMode
)
from dotenv import load_dotenv
from urllib.parse import urlparse

# --- Load environment ---
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # full public URL e.g. https://app.onrender.com/webhook/
PORT = int(os.getenv("PORT", "10000"))

if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")
if not WEBHOOK_URL:
    raise RuntimeError("WEBHOOK_URL not set in .env ‚Äî required for webhook mode (Render)")

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Init bot & dispatcher ---
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- Directories ---
IMAGES_DIR = Path("images")
RESULTS_DIR = Path("results")
RESULTS_DIR.mkdir(exist_ok=True)


# --- States ---
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_onlyfans = State()
    quiz_waiting_answer = State()


# --- Helper for inline keyboards ---
def make_kb(*rows):
    kb = InlineKeyboardMarkup(row_width=2)
    for row in rows:
        buttons = [InlineKeyboardButton(text=t, callback_data=c) for t, c in row]
        kb.row(*buttons)
    return kb


def input_file_safe(path: Path):
    if path.exists():
        return InputFile(str(path))
    return None


# ======================== HANDLERS ========================

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    welcome_img = IMAGES_DIR / "welcome.jpg"
    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ Eclipse Agency!</b> üåë\n\n"
        "–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –≥–∏–¥–æ–º –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ —Ä–æ–ª–∏ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, "
        "–∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–≤—è–∑—å, —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "<b>–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n"
        "üí∞ 20% –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂\n"
        "üïó –ì–∏–±–∫–∏–π 8-—á–∞—Å–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫\n"
        "üìÜ 1 –≤—ã—Ö–æ–¥–Ω–æ–π –≤ –Ω–µ–¥–µ–ª—é\n"
        "üí∏ –í—ã–ø–ª–∞—Ç—ã ‚Äî 7 –∏ 22 —á–∏—Å–ª–∞ (USDT)\n"
        "‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (~5%) –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º"
    )

    intro_text = (
        "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è?\n\n"
        "üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ ‚Äî –¥–æ 23% –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ KPI\n"
        "üë• –†–æ–ª—å Team Lead ‚Äî +1% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã (3 —á–µ–ª–æ–≤–µ–∫–∞)\n"
        "üéØ –ë–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî –≤—ã–ø–ª–∞—Ç—ã –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É\n"
        "üöÄ –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç ‚Äî –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è üëá"
    )
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚≠ê–ú–Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è‚≠ê", callback_data="agree_conditions")
    )

    if welcome_img.exists():
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=InputFile(str(welcome_img)),
            caption=caption + "\n\n" + intro_text,
            parse_mode=ParseMode.HTML,
            reply_markup=kb
        )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text=caption + "\n\n" + intro_text,
            parse_mode=ParseMode.HTML,
            reply_markup=kb
        )


@dp.callback_query_handler(lambda c: c.data == "agree_conditions")
async def cb_agree_conditions(cq: types.CallbackQuery):
    await cq.answer()
    text = (
        "‚ùóÔ∏è–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –£—Å–ª–æ–≤–∏–µ –Ω–∏–∂–µ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π)!\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ä–µ—à–∏—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π "
        "—Å –º–æ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ ‚Äî –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    await bot.send_message(cq.from_user.id, text)
    await Form.waiting_for_name.set()


@dp.message_handler(state=Form.waiting_for_name, content_types=types.ContentTypes.TEXT)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    text = f"–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, {name}! üåü\n\n{name}, —Ç—ã –∑–Ω–∞–∫–æ–º(-–∞) —Å —Ä–∞–±–æ—Ç–æ–π –Ω–∞ OnlyFans?"
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–î–∞", callback_data="onlyfans_yes"),
        InlineKeyboardButton("–ù–µ—Ç", callback_data="onlyfans_no")
    )
    await bot.send_message(message.chat.id, text, reply_markup=kb)
    await Form.waiting_for_onlyfans.set()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("onlyfans_"), state=Form.waiting_for_onlyfans)
async def cb_onlyfans_answer(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    data = await state.get_data()
    name = data.get("name", "–¥—Ä—É–≥")
    if cq.data == "onlyfans_yes":
        await bot.send_message(cq.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ, {name}! –¢–æ–≥–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ ‚úÖ")
    else:
        await bot.send_message(cq.from_user.id, f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, {name}, —è –≤—Å—ë –æ–±—ä—è—Å–Ω—é —Å –Ω—É–ª—è üòâ")
    await state.finish()

    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ê –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?", callback_data="earn_money"))
    await bot.send_message(cq.from_user.id, "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å üí∏", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "earn_money")
async def cb_earn_money(cq: types.CallbackQuery):
    await cq.answer()
    uid = cq.from_user.id
    text1 = (
        "–ï—â—ë —Å–æ –≤—Ä–µ–º—ë–Ω –±—Ä–∞—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤ —è –Ω–∞—É—á–∏–ª—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –ª—é–±—É—é –¥–µ—Ç–∞–ª—å "
        "–≤ —Ç–æ—á–∫—É –æ–ø–æ—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –¢—ã —Å–ø—Ä–æ—Å–∏—à—å –∫–∞–∫? –í—Å—ë –ø—Ä–æ—Å—Ç–æ:\n\n"
        "–£–∑–Ω–∞–ª –∏–º—è? ‚Äî –∑–∞–≥—É–≥–ª–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.\n"
        "–ï—â—ë –∏ —Ñ–∞–º–∏–ª–∏—é? ‚Äî –Ω–∞—à—ë–ª —Ñ–æ—Ç–æ, –∑–∞–∫–∏–Ω—É–ª —à—É—Ç–∫—É.\n"
        "–§–∞–Ω —Ä–∞—Å—Å–∫–∞–∑–∞–ª –≥–¥–µ –∂–∏–≤–µ—Ç? ‚Äî –∏–∑—É—á–∞—é –º–µ—Å—Ç–Ω—ã–µ —Ñ–∏—à–∫–∏.\n\n"
        "–õ—é–±–∞—è –º–µ–ª–æ—á—å ‚Äî –ø–æ–≤–æ–¥ –¥–ª—è —Å–±–ª–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞—Ç—å, –∞ –∑–∞–≤–æ–µ–≤–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ."
    )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–¥–µ –∏ –∫–∞–∫ –∏—Å–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ ?", callback_data="find_clients"))
    await bot.send_message(uid, text1, reply_markup=kb)


# ======================== –ù–æ–≤–∞—è —á–∞—Å—Ç—å: –ü–û –∏ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ========================

@dp.callback_query_handler(lambda c: c.data == "questions_start")
async def cb_questions_start(cq: types.CallbackQuery):
    await cq.answer()
    uid = cq.from_user.id
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üåü–ü–û", callback_data="soft_first"),
        InlineKeyboardButton("üåü–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞", callback_data="teamwork_first")
    )
    caption = "–¢–µ–ø–µ—Ä—å –æ–±—Å—É–¥–∏–º –ü–û –∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É ü§ñ"
    photo = input_file_safe(IMAGES_DIR / "teamwork.jpg")
    if photo:
        await bot.send_photo(uid, photo=photo, caption=caption, reply_markup=kb)
    else:
        await bot.send_message(uid, caption, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "teamwork_first")
async def teamwork_first(callback: types.CallbackQuery):
    await callback.answer()
    text = (
        "ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –æ—Å–Ω–æ–≤–∞ —É—Å–ø–µ—Ö–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –Ω–∞—à–µ–π —Å—Ñ–µ—Ä–µ.\n\n"
        "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª:\n"
        "üîπ –î–æ–≤–µ—Ä–∏–µ ‚Äî –≤—ã–ø–æ–ª–Ω—è–π –æ–±–µ—â–∞–Ω–∏—è.\n"
        "üîπ –û–±—â–µ–Ω–∏–µ ‚Äî —Ä–µ—à–∞–π –≤–æ–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É.\n"
        "üîπ –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ ‚Äî –¥–µ–ª–∏—Å—å –æ–ø—ã—Ç–æ–º.\n"
        "üîπ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –æ—Ç–≤–µ—á–∞–π –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "üí¨ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏–Ω–µ—Ä–≥–∏—è –Ω–µ —Å–ª—É—á–∞–µ—Ç—Å—è —Å–∞–º–∞ —Å–æ–±–æ–π ‚Äî –µ—ë –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å."
    )
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üü© –ê —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –ü–û", callback_data="soft_second")
    )
    await callback.message.edit_text(text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "soft_first")
async def soft_first(callback: types.CallbackQuery):
    await callback.answer()
    text = (
        "üü© –î–ª—è —Ä–∞–±–æ—Ç—ã –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Onlymonster.\n\n"
        "üíª –°–∫–∞—á–∞–π: https://onlymonster.ai/downloads\n"
        "‚ö†Ô∏è –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è ‚Äî –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É.\n\n"
        "üí∏ –£—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö: –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã."
    )
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("ü§ù –ê —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –∫–æ–º–∞–Ω–¥–µ", callback_data="teamwork_second")
    )
    await callback.message.edit_text(text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "soft_second")
async def soft_second(callback: types.CallbackQuery):
    await callback.answer()
    text = (
        "üü© Onlymonster ‚Äî –Ω–∞—à –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.\n\n"
        "üíª –°–∫–∞—á–∞–π: https://onlymonster.ai/downloads\n\n"
        "üí∏ –£—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–π –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö.\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω Google-–∞–∫–∫–∞—É–Ω—Ç."
    )
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="final_question")
    )
    await callback.message.edit_text(text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "teamwork_second")
async def teamwork_second(callback: types.CallbackQuery):
    await callback.answer()
    text = (
        "ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É.\n\n"
        "üîπ –î–æ–≤–µ—Ä–∏–µ\nüîπ –û–±—â–µ–Ω–∏–µ\nüîπ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–æ–ª–µ–π\nüîπ –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n\n"
        "üí¨ –£–≤–∞–∂–∞–π –∫–æ–ª–ª–µ–≥ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å–≤—è–∑—å."
    )
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="final_question")
    )
    await callback.message.edit_text(text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "final_question")
async def final_question(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "–ê —Ç–µ–ø–µ—Ä—å –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ —Ç—ã —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª:\n\n"
        "üôã –ö—É–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –∑–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã?"
    )


# ======================== Webhook startup/shutdown ========================

async def on_startup(dp: Dispatcher):
    try:
        await bot.delete_webhook()
        logger.info("Old webhook deleted.")
    except Exception:
        logger.exception("Error deleting old webhook.")
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to {WEBHOOK_URL}")


async def on_shutdown(dp: Dispatcher):
    logger.info("Shutting down...")
    try:
        await bot.delete_webhook()
    except Exception:
        logger.exception("Error removing webhook")
    await bot.session.close()


if __name__ == "__main__":
    parsed = urlparse(WEBHOOK_URL)
    webhook_path = parsed.path
    executor.start_webhook(
        dispatcher=dp,
        webhook_path=webhook_path,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host="0.0.0.0",
        port=PORT,
    )
```
