import logging
import os
from pathlib import Path
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ParseMode
)
from dotenv import load_dotenv

load env

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL") # full public URL e.g. https://app.onrender.com/webhook/
<TOKEN>
PORT = int(os.getenv("PORT", "10000"))

if not API_TOKEN:
raise RuntimeError("BOT_TOKEN not set in .env")
if not WEBHOOK_URL:
raise RuntimeError("WEBHOOK_URL not set in .env ‚Äî required for webhook mode (Render)")

logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(name)

init bot & dispatcher

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

directories

IMAGES_DIR = Path("images")
RESULTS_DIR = Path("results")
RESULTS_DIR.mkdir(exist_ok=True)

states

class Form(StatesGroup):
waiting_for_name = State()
waiting_for_onlyfans = State()
quiz_waiting_answer = State()

helper to create inline keyboards compact (row_width=2)

def make_kb(*rows):
"""
rows = list of tuples/lists of (text, callback_data)
returns InlineKeyboardMarkup with row_width=2
"""
kb = InlineKeyboardMarkup(row_width=2)
for row in rows:
# row can be sequence of pairs or a single pair
if all(isinstance(x, (list, tuple)) and len(x) == 2 for x in row):
buttons = [InlineKeyboardButton(text=t, callback_data=c) for t, c in row]
kb.row(*buttons)
else:
# fallback: treat row as list of pairs
buttons = [InlineKeyboardButton(text=t, callback_data=c) for t, c in row]
kb.row(*buttons)
return kb

def input_file_safe(path: Path):
if path.exists():
return InputFile(str(path))
return None

----------------- Handlers / Flows -----------------

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
welcome_img = IMAGES_DIR / "welcome.jpg"
caption = (
"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ Eclipse Agency!</b> üåë\n\n"
"–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –≥–∏–¥–æ–º –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ —Ä–æ–ª–∏ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, "
"–∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–≤—è–∑—å, —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
"<b>–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n"
"üí∞ 20% –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂\n"
"üïó –ì–∏–±–∫–∏–π 8-—á–∞—Å–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫\n"
"üìÜ 1 –≤—ã—Ö–æ–¥–Ω–æ–π –≤ –Ω–µ–¥–µ–ª—é\n"
"üí∏ –í—ã–ø–ª–∞—Ç—ã ‚Äî 7 –∏ 22 —á–∏—Å–ª–∞ (USDT)\n"
"‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (~5%) –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º"
)

intro_text = (
    "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è?\n\n"
    "üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ ‚Äî –¥–æ 23% –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ KPI\n"
    "üë• –†–æ–ª—å Team Lead ‚Äî +1% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã (3 —á–µ–ª–æ–≤–µ–∫–∞)\n"
    "üéØ –ë–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî –≤—ã–ø–ª–∞—Ç—ã –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É\n"
    "üöÄ –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç ‚Äî –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
    "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è üëá"
)
kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("‚≠ê–ú–Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è‚≠ê", callback_data="agree_conditions")
)

if welcome_img.exists():
    await bot.send_photo(chat_id=message.chat.id, photo=InputFile(str(welcome_img)),
                         caption=caption + "\n\n" + intro_text, parse_mode=ParseMode.HTML,
                         reply_markup=kb)
else:
    await bot.send_message(chat_id=message.chat.id, text=caption + "\n\n" + intro_text,
                           parse_mode=ParseMode.HTML, reply_markup=kb)

Agree conditions -> ask name

@dp.callback_query_handler(lambda c: c.data == "agree_conditions")
async def cb_agree_conditions(cq: types.CallbackQuery):
await cq.answer() # acknowledge callback
text = (
"‚ùóÔ∏è–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –£—Å–ª–æ–≤–∏–µ –Ω–∏–∂–µ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π)!\n\n"
"‚Äî –ï—Å–ª–∏ —Ç—ã —Ä–µ—à–∏—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π "
"—Å –º–æ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
"–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ ‚Äî –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
)
await bot.send_message(cq.from_user.id, text)
await Form.waiting_for_name.set()

receive name, ask about OnlyFans (using inline Yes/No)

@dp.message_handler(state=Form.waiting_for_name, content_types=types.ContentTypes.TEXT)
async def process_name(message: types.Message, state: FSMContext):
name = message.text.strip()
await state.update_data(name=name)
text = f"–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, {name}! üåü\n\n{name}, —Ç—ã –∑–Ω–∞–∫–æ–º(-–∞) —Å —Ä–∞–±–æ—Ç–æ–π –Ω–∞ OnlyFans?"
kb = InlineKeyboardMarkup(row_width=2).add(
InlineKeyboardButton("–î–∞", callback_data="onlyfans_yes"),
InlineKeyboardButton("–ù–µ—Ç", callback_data="onlyfans_no")
)
await bot.send_message(message.chat.id, text, reply_markup=kb)
await Form.waiting_for_onlyfans.set()

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("onlyfans_"), state=Form.waiting_for_onlyfans)
async def cb_onlyfans_answer(cq: types.CallbackQuery, state: FSMContext):
await cq.answer()
data = await state.get_data()
name = data.get("name", "–¥—Ä—É–≥")
if cq.data == "onlyfans_yes":
await bot.send_message(cq.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ, {name}! –¢–æ–≥–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ ‚úÖ")
else:
await bot.send_message(cq.from_user.id, f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, {name}, —è –≤—Å—ë –æ–±—ä—è—Å–Ω—é —Å –Ω—É–ª—è üòâ")
await state.finish()

# next button inline
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ê –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?", callback_data="earn_money"))
await bot.send_message(cq.from_user.id, "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å üí∏", reply_markup=kb)

Earn money flow

@dp.callback_query_handler(lambda c: c.data == "earn_money")
async def cb_earn_money(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text1 = (
"–ï—â—ë —Å–æ –≤—Ä–µ–º—ë–Ω –±—Ä–∞—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤ —è –Ω–∞—É—á–∏–ª—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –ª—é–±—É—é –¥–µ—Ç–∞–ª—å "
"–≤ —Ç–æ—á–∫—É –æ–ø–æ—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –¢—ã —Å–ø—Ä–æ—Å–∏—à—å –∫–∞–∫? –í—Å—ë –ø—Ä–æ—Å—Ç–æ:\n\n"
"–£–∑–Ω–∞–ª –∏–º—è? ‚Äî –∑–∞–≥—É–≥–ª–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.\n"
"–ï—â—ë –∏ —Ñ–∞–º–∏–ª–∏—é? ‚Äî –Ω–∞—à—ë–ª —Ñ–æ—Ç–æ, –∑–∞–∫–∏–Ω—É–ª —à—É—Ç–∫—É.\n"
"–§–∞–Ω —Ä–∞—Å—Å–∫–∞–∑–∞–ª –≥–¥–µ –∂–∏–≤–µ—Ç? ‚Äî –∏–∑—É—á–∞—é –º–µ—Å—Ç–Ω—ã–µ —Ñ–∏—à–∫–∏.\n\n"
"–õ—é–±–∞—è –º–µ–ª–æ—á—å ‚Äî –ø–æ–≤–æ–¥ –¥–ª—è —Å–±–ª–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞—Ç—å, –∞ –∑–∞–≤–æ–µ–≤–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ."
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–¥–µ –∏ –∫–∞–∫ –∏—Å–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ ?", callback_data="find_clients"))
await bot.send_message(uid, text1, reply_markup=kb)

Find clients flow (photo + text + button in same message where applicable)

@dp.callback_query_handler(lambda c: c.data == "find_clients")
async def cb_find_clients(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
caption1 = (
"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –Ω–∞ —Ä—ã–±–∞–ª–∫–µ: —É–ª–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–∂–∏–≤–∫–∏. –£ –Ω–∞—Å ‚Äî —ç—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ñ–∞–Ω–∞–º.\n\n"
"–î–æ–±–∞–≤–ª—è–π –∂–∏–≤–æ—Å—Ç—å, —Å–ª–µ–Ω–≥, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª—è—Ç—å—Å—è üëá"
)
photo = input_file_safe(IMAGES_DIR / "fishing.jpg")
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ó–∞—á–µ–º –Ω—É–∂–Ω—ã —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏?", callback_data="diff_mailings"))
if photo:
await bot.send_photo(uid, photo=photo, caption=caption1, reply_markup=kb)
else:
await bot.send_message(uid, caption1, reply_markup=kb)

Diff mailings ‚Äî send 3 messages but each with its own inline buttons placed in same message where needed

@dp.callback_query_handler(lambda c: c.data == "diff_mailings")
async def cb_diff_mailings(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
await send_photo_with_buttons(uid, "vip.jpg", "VIP-–∫–ª–∏–µ–Ω—Ç–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω–∏ –ø–ª–∞—Ç—è—Ç –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ, –∞ –Ω–µ –∑–∞ —à–∞–±–ª–æ–Ω.",
[("–Ø –≤—Å—ë –ø–æ–Ω—è–ª", "understood"), ("–ú–æ–∂–Ω–æ –µ—â—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?", "understood")])
await send_photo_or_text_with_buttons(uid, "online.jpg", "–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", [])
await send_photo_or_text_with_buttons(uid, "mass.jpg", "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äî –¥–ª—è –≤—Å–µ—Ö. –ü–∏—à–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, —Å –ª—ë–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º üòâ",
[("–Ø –≤—Å—ë –ø–æ–Ω—è–ª", "understood")])

@dp.callback_query_handler(lambda c: c.data == "understood")
async def cb_understood(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"üéØ –ò–∑–±–µ–≥–∞–π –±–∞–Ω–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤—Ä–æ–¥–µ 'Hi, how are u?'. –ö–ª–∏–µ–Ω—Ç—ã —Ü–µ–Ω—è—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å.\n\n"
"‚úÖ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç–∞—Ä—Ç–æ–≤:\n"
"- –û–≥–æ, —ç—Ç–æ —Ç—ã? –Ø —Ç–µ–±—è –∂–¥–∞–ª–∞!\n"
"- –°–ª—É—à–∞–π, –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç! –ö—Ä–∞—Å–Ω—ã–π –∏–ª–∏ —á—ë—Ä–Ω—ã–π?\n"
"- –ê —Ç—ã –ø—Ä–æ–±–æ–≤–∞–ª —Å–µ–∫—Å –ø–æ—Å–ª–µ –≤–¥–æ—Ö–∞ –≥–µ–ª–∏—è? üòâ"
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ?", callback_data="questions_start"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "questions_start")
async def cb_questions_start(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
# ask knowledge checks
kb = InlineKeyboardMarkup(row_width=2).add(
InlineKeyboardButton("üåü–ü–û", callback_data="soft"),
InlineKeyboardButton("üåü–ö–æ–º–∞–Ω–¥–Ω–∞—è –†–∞–±–æ—Ç–∞", callback_data="teamwork")
)
photo = input_file_safe(IMAGES_DIR / "teamwork.jpg")
caption = "–¢–µ–ø–µ—Ä—å –æ–±—Å—É–¥–∏–º –ü–û –∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É ü§ñ"
if photo:
await bot.send_photo(uid, photo=photo, caption=caption, reply_markup=kb)
else:
await bot.send_message(uid, caption, reply_markup=kb)

--- –ü–û (Onlymonster) flow ---

@dp.callback_query_handler(lambda c: c.data == "soft")
async def cb_soft(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"üü© –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Onlymonster.\n\n"
"–ú—ã —Å —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ ‚Äî —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –µ—â—ë –≤ –ø–µ—Ä–≤—ã—Ö —Ç–µ—Å—Ç–∞—Ö.\n\n"
"üíª –°–∫–∞—á–∞–π: https://onlymonster.ai/downloads\n\n
"
"<b>–í–ê–ñ–ù–û:</b> –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è ‚Äî –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ê —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –∫–æ–º–∞–Ω–¥–µ ?", callback_data="team_from_soft"))
video = input_file_safe(IMAGES_DIR / "onlymonster_intro.mp4")
# send text+button in single message
await bot.send_message(uid, text, parse_mode=ParseMode.HTML, reply_markup=kb)
# then send video (if exists), also with caption as single block
if video:
kb2 = InlineKeyboardMarkup().add(InlineKeyboardButton("üí∏ –£—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –¥–∞–ª—å—à–µ", callback_data="balance_info"))
await bot.send_video(uid, video=video, caption="–í–∏–¥–µ–æ (8 –º–∏–Ω—É—Ç) —Å –æ—Å–Ω–æ–≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã –≤ Onlymonster.", reply_markup=kb2)
else:
await bot.send_message(uid, "–í–∏–¥–µ–æ (8 –º–∏–Ω—É—Ç) —Å –æ—Å–Ω–æ–≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã –≤ Onlymonster –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ images/.",
reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üí∏ –£—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –¥–∞–ª—å—à–µ", callback_data="balance_info")))

@dp.callback_query_handler(lambda c: c.data == "balance_info")
async def cb_balance_info(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"üí∏ –£—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –≤—Ç–æ—Ä–∞—è –∫–ª—é—á–µ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–∞—Ä—è–¥—É —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏.\n\n"
"üü© –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Google –¢–∞–±–ª–∏—Ü—ã. –í—Å—ë –ø—Ä–æ—Å—Ç–æ: –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã —Ç—ã —Ñ–∏–∫—Å–∏—Ä—É–µ—à—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.\n\n"
"–î–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç Google ‚Äî —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ."
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ê —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –∫–æ–º–∞–Ω–¥–µ ?", callback_data="team_from_soft"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "team_from_soft")
async def cb_team_from_soft(cq: types.CallbackQuery):
await cq.answer()
await teamwork_flow(cq.from_user.id, followup_button=True)

@dp.callback_query_handler(lambda c: c.data == "teamwork")
async def cb_teamwork(cq: types.CallbackQuery):
await cq.answer()
await teamwork_flow(cq.from_user.id, followup_button=False)

async def teamwork_flow(uid: int, followup_button: bool = False):
photo = input_file_safe(IMAGES_DIR / "team.jpg")
caption = (
"ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –æ—Å–Ω–æ–≤–∞ —É—Å–ø–µ—Ö–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –Ω–∞—à–µ–π —Å—Ñ–µ—Ä–µ.\n\n"
"üîπ –î–æ–≤–µ—Ä–∏–µ ‚Äî –≤—ã–ø–æ–ª–Ω—è–π –æ–±–µ—â–∞–Ω–∏—è\n"
"üîπ –û–±—â–µ–Ω–∏–µ ‚Äî —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π —Å –∫–æ–ª–ª–µ–≥–∞–º–∏\n"
"üîπ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–æ–ª–µ–π ‚Äî –∑–Ω–∞–π, –∫—Ç–æ –∑–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç\n"
"üîπ –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å ‚Äî —É–≤–∞–∂–∞–π —á—É–∂–∏–µ –º–Ω–µ–Ω–∏—è\n"
"üîπ –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ ‚Äî –¥–µ–ª–∏—Å—å –æ–ø—ã—Ç–æ–º\n"
"üîπ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –æ—Ç–≤–µ—á–∞–π –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π–¥–µ–º –∫ –ü–û", callback_data="soft"))
if photo:
await bot.send_photo(uid, photo=photo, caption=caption, reply_markup=kb if followup_button else kb)
else:
await bot.send_message(uid, caption, reply_markup=kb)

---------------- Objections / tools / quiz ----------------

@dp.callback_query_handler(lambda c: c.data == "start_objections")
async def cb_start_objections(cq: types.CallbackQuery):
await cq.answer()
await send_objections_menu(cq.from_user.id)

async def send_objections_menu(uid: int):
kb = InlineKeyboardMarkup(row_width=2)
kb.add(
InlineKeyboardButton("–≠—Ç–æ –¥–æ—Ä–æ–≥–æ!", callback_data="obj_expensive"),
InlineKeyboardButton("–ü–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ç—å —Ç–µ–±–µ?", callback_data="obj_trust"),
InlineKeyboardButton("–ê —Ç—ã –Ω–µ –æ–±–º–∞–Ω–µ—à—å –º–µ–Ω—è?", callback_data="obj_scam"),
InlineKeyboardButton("–£ –º–µ–Ω—è –≤—Å–µ–≥–æ 10$", callback_data="obj_10"),
InlineKeyboardButton("–Ø —Ö–æ—á—É –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å", callback_data="obj_love"),
InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data="obj_rules_platform"),
InlineKeyboardButton("–ó–∞–ø—Ä–µ—Ç—ã –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞", callback_data="obj_rules_agency"),
InlineKeyboardButton("–ß–µ–∫-–ª–∏—Å—Ç", callback_data="obj_checklist"),
InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_quiz")
)
text = (
"üî• –¢–æ–ø-5 –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π:\n"
"1. –≠—Ç–æ –¥–æ—Ä–æ–≥–æ!\n2. –ü–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ç—å —Ç–µ–±–µ?\n3. –ê —Ç—ã –Ω–µ –æ–±–º–∞–Ω–µ—à—å –º–µ–Ω—è?\n4. –£ –º–µ–Ω—è –≤—Å–µ–≥–æ –ª–∏—à—å 10$...\n5. –Ø –Ω–µ —Ö–æ—á—É –Ω–∏—á–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç—å, —è —Ö–æ—á—É –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å.\n\n"
"–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–≤–µ—Ç—ã:"
)
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_expensive")
async def cb_obj_expensive(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç '–≠—Ç–æ –¥–æ—Ä–æ–≥–æ' ‚Äî —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–µ—Ç —Ä–∞–ø–ø–æ—Ä—Ç–∞, –¥–æ–≤–µ—Ä–∏—è.\n\n"
"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–∞–º –ø–æ —Å–µ–±–µ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç. –ü—Ä–æ–¥–∞—ë—Ç ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—â—É—â–µ–Ω–∏–µ.\n\n"
"–ü—Ä–∏–º–µ—Ä —Å–ª–∞–±–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n–ú–∏–ª—ã–π, –º–æ–∏ –¥–≤–∞ —Ñ–æ—Ç–æ –ø–æ–¥–Ω–∏–º—É—Ç —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ üòè\n\n"
"–ü—Ä–∏–º–µ—Ä —Å–∏–ª—å–Ω–æ–≥–æ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π + —Å—é–∂–µ—Ç):\n(–ò–º—è), –Ω–∞ –ø–µ—Ä–≤–æ–º —Ñ–æ—Ç–æ —è –±—É–∫–≤–∞–ª—å–Ω–æ –æ–±–Ω–∞–∂–∏–ª–∞—Å—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ–º, –Ω–æ –∏ –¥—É—à–æ–π... –µ—â—ë –∏ –≤ —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –ø–æ–∑–µ. –£–≥–∞–¥–∞–µ—à—å –∫–∞–∫–∞—è?"
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ö–∞–∫ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã?", callback_data="obj_expensive_options"),
InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start_objections"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_expensive_options")
async def cb_obj_expensive_options(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"üí° –ö–∞–∫ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n"
"üëâ 2 —Ñ–æ—Ç–æ + –≤–∏–¥–µ–æ-–¥—Ä–∞–∑–Ω–∏–ª–∫–∞ –∑–∞ $25\n"
"üëâ 2‚Äì3 —Ñ–æ—Ç–æ –∑–∞ $20\n\n"
"–ò–ª–∏ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è: '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è, –ø–æ—ç—Ç–æ–º—É –¥–∞–º –≤—ã–±–æ—Ä: —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å?'"
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start_objections"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_trust")
async def cb_obj_trust(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"üß† '–ü–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ç—å —Ç–µ–±–µ?'\n\n"
"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
"‚Äî '–ü–æ —Ç–æ–π –∂–µ –ø—Ä–∏—á–∏–Ω–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —è –¥–æ–≤–µ—Ä—è—é —Ç–µ–±–µ –∏ –≤–µ—Ä—é, —á—Ç–æ –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏. –ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?'\n"
"‚Äî '–¢—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ—à—å –º–Ω–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ–±—è –∫—Ç–æ-—Ç–æ –æ–±–º–∞–Ω—ã–≤–∞–ª —Ä–∞–Ω–µ–µ? –ò–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Ç–æ—Ä–≥—É–µ—à—å—Å—è?'"
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start_objections"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_scam")
async def cb_obj_scam(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"üí¨ '–ê —Ç—ã –Ω–µ –æ–±–º–∞–Ω–µ—à—å –º–µ–Ω—è?'\n\n"
"1) –ß–µ—Å—Ç–Ω–æ—Å—Ç—å + –ª–æ–≥–∏–∫–∞:\n"
""–ú–æ–∂–Ω–æ —è –±—É–¥—É —Å —Ç–æ–±–æ–π –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–π? –ù–∞—à–µ –æ–±—â–µ–Ω–∏–µ ‚Äî –∫–∞–∫ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã –æ–±–∞ –ø–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–∏ –∏ –∫–∞–π—Ñ. –ó–∞—á–µ–º –º–Ω–µ –æ–±–º–∞–Ω—ã–≤–∞—Ç—å —Ç–µ–±—è?" üòÇ\n\n"
"2) –§–ª–∏—Ä—Ç + —é–º–æ—Ä ‚Äî –ª—ë–≥–∫–∞—è –∏–≥—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –¥–æ–≤–µ—Ä–∏–µ."
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start_objections"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_10")
async def cb_obj_10(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"‚ùóÔ∏è '–£ –º–µ–Ω—è –≤—Å–µ–≥–æ 10$' ‚Äî –Ω–µ –∑–ª–∏—Å—å –∏ –Ω–µ —É–Ω–∏–∂–∞–π –∫–ª–∏–µ–Ω—Ç–∞.\n"
"–í–∞—Ä–∏–∞–Ω—Ç –º—è–≥–∫–æ–π –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏:\n"
""–ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ —Ç—ã –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π —Å–æ –º–Ω–æ–π. –ú–æ–≥—É —è –±—ã—Ç—å —á–µ—Å—Ç–Ω–æ–π? –°–∫–∞–∂–∏, —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥—É–º–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∏—Ç—å—Å—è –≤—Å–µ–º –∑–∞ $10 –Ω–æ—Ä–º–∞–ª—å–Ω–æ?""
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start_objections"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_love")
async def cb_obj_love(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"üíå '–Ø —Ö–æ—á—É –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å' ‚Äî –æ–±—ä—è—Å–Ω—è–µ–º —Ä–∞–º–∫–∏: –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏, "
"–∏ —Ç—Ä—É–¥/–≤—Ä–µ–º—è –º–æ–¥–µ–ª–∏ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è. –ù–∏–∫–∞–∫–∏—Ö –æ–±–µ—â–∞–Ω–∏–π –æ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö."
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start_objections"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_rules_platform")
async def cb_obj_rules_platform(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"üö´ –ü—Ä–∞–≤–∏–ª–∞ OnlyFans (–æ—Å–Ω–æ–≤–Ω–æ–µ):\n"
"- –ù–∏–∫–∞–∫–∏—Ö –ª–∏—Ü –º–ª–∞–¥—à–µ 18 –ª–µ—Ç\n"
"- –ù–∏–∫–∞–∫–æ–≥–æ –Ω–∞—Å–∏–ª–∏—è/–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏—è/–±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è\n"
"- –ù–∏–∫–∞–∫–æ–π –∑–æ–æ—Ñ–∏–ª–∏–∏\n"
"- –ù–µ –ø—É–±–ª–∏–∫—É–π —á—É–∂–∏–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç.–¥."
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞", callback_data="obj_rules_agency"),
InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start_objections"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_rules_agency")
async def cb_obj_rules_agency(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –æ—á–µ–Ω—å —Ü–µ–Ω–∏—Ç —É—Å–µ—Ä–¥–Ω—ã—Ö –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
"–ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∏ –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–≥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —à—Ç—Ä–∞—Ñ–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏."
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ß–µ–∫-–ª–∏—Å—Ç", callback_data="obj_checklist"),
InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start_objections"))
await bot.send_message(uid, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_checklist")
async def cb_obj_checklist(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
text = (
"üéâ –í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º –¥–ª—è —Å–º–µ–Ω—ã.\n\n"
"–ß–µ–∫-–ª–∏—Å—Ç ‚Äî –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–π —Å–º–µ–Ω–µ."
)
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_quiz"),
InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start_objections"))
await bot.send_message(uid, text, reply_markup=kb)

---------------- QUIZ ----------------

QUIZ_QUESTIONS = [
"üôã –ù–∞ —á—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω—É–∂–Ω–æ –æ–ø–∏—Ä–∞—Ç—å—Å—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?",
"üôã –ú–æ–∂–Ω–æ –ª–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ—á–µ–º—É?",
"‚úçÔ∏è –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–∞—Å—Å—ã–ª–∫—É –∫–ª–∏–µ–Ω—Ç—É. (–ü—Ä–∏–º–µ—Ä: –°–∞–π–º–æ–Ω, —É –Ω–µ–≥–æ 3-—Ö –ª–µ—Ç–Ω—è—è –¥–æ—á—å, –∏ –æ–Ω —É–≤–ª–µ–∫–∞–µ—Ç—Å—è –±–∞—Å–∫–µ—Ç–±–æ–ª–æ–º.)",
"–ü–æ—Å–ª–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, –æ–Ω –ø–∏—à–µ—Ç: '–Ø –¥—É–º–∞–ª —Ç—ã –ø–æ–∫–∞–∂–µ—à—å –º–Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ...' ‚Äî –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—à—å?",
"VIP 100-500$ –Ω–µ –æ—Ç–∫—Ä—ã–ª –ø–ª–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ, –ø–∏—à–µ—Ç: '–£ –º–µ–Ω—è –Ω–µ—Ç –¥–µ–Ω–µ–≥' ‚Äî —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—à—å?",
"VIP 500-1000$ –∫—É–ø–∏–ª –≤–∏–¥–µ–æ –∑–∞ $80 –∏ –ø—Ä–æ—Å–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ ‚Äî –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—à—å?",
"–ö–ª–∏–µ–Ω—Ç: '–Ø –ø–æ–ª—É—á—É –¥–µ–Ω—å–≥–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –ø–æ–∫–∞–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ?' ‚Äî —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—à—å?",
"–ö–ª–∏–µ–Ω—Ç: '–ö–∞–∫ –¥–µ–ª–∞?' ‚Äî –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ –Ω–µ –∑–∞—Å—Ç—Ä—è–ª?",
"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫—Ä—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω ‚Äî —Ö–æ—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç. –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å?",
"–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–¥–µ–ª—å –Ω–µ –¥–µ–ª–∞–µ—Ç ‚Äî –∫–∞–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞?",
"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å—Ä–∞–∑—É —Ç—Ä–µ–±—É–µ—Ç —Å–∞–º—ã–π –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ‚Äî –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—à—å?"
]

user_quiz_data = {} # uid -> {"q_index": int, "answers": []}

@dp.callback_query_handler(lambda c: c.data == "start_quiz")
async def cb_start_quiz(cq: types.CallbackQuery):
await cq.answer()
uid = cq.from_user.id
user_quiz_data[uid] = {"q_index": 0, "answers": []}
kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="start_objections"))
await bot.send_message(uid, "üîé –¢–µ—Å—Ç –Ω–∞—á–∞—Ç. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ, —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –ü–æ–µ—Ö–∞–ª–∏!", reply_markup=kb)
await bot.send_message(uid, QUIZ_QUESTIONS[0])
await Form.quiz_waiting_answer.set()

@dp.message_handler(state=Form.quiz_waiting_answer, content_types=types.ContentTypes.TEXT)
async def process_quiz_answer(message: types.Message, state: FSMContext):
uid = message.from_user.id
data = user_quiz_data.get(uid)
if not data:
await message.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–∂–º–∏ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' –≤ –º–µ–Ω—é.")
await state.finish()
return

q_index = data["q_index"]
ans = message.text.strip()
data["answers"].append({"question": QUIZ_QUESTIONS[q_index], "answer": ans})
q_index += 1
data["q_index"] = q_index
user_quiz_data[uid] = data

if q_index < len(QUIZ_QUESTIONS):
    await bot.send_message(uid, QUIZ_QUESTIONS[q_index])
    return
else:
    await state.finish()
    save_path = RESULTS_DIR / f"{uid}_answers.txt"
    with open(save_path, "w", encoding="utf-8") as f:
        f.write(f"Quiz results for user_id: {uid}\n\n")
        for i, qa in enumerate(data["answers"], start=1):
            f.write(f"Q{i}: {qa['question']}\nA{i}: {qa['answer']}\n\n")
    await bot.send_message(uid, "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã.")
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    final_text = (
        f"–ù—É —á—Ç–æ –∂, {user_name}, –æ—Ç–∫—Ä—ã–≤–∞–π –±—É—Ç—ã–ª–∫—É Moet Chandon üçæ ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –≤–≤–æ–¥–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è üî•\n\n"
        "–ù–∞–ø–∏—à–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–ª —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç (–ª–∏–±–æ @loco_hr), –∏ –æ–Ω –Ω–∞–ø—Ä–∞–≤–∏—Ç —Ç–µ–±—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await bot.send_message(uid, final_text)
    user_quiz_data.pop(uid, None)

---------------- utilities ----------------

async def send_photo_with_buttons(uid: int, image_name: str, caption: str, buttons: list):
"""
buttons: list of (text, callback)
sends photo with caption and inline buttons (if image exists), otherwise sends text with buttons
"""
photo = input_file_safe(IMAGES_DIR / image_name)
kb = InlineKeyboardMarkup(row_width=2)
for t, c in buttons:
kb.add(InlineKeyboardButton(t, callback_data=c))
if photo:
await bot.send_photo(uid, photo=photo, caption=caption, reply_markup=kb if buttons else None)
else:
await bot.send_message(uid, caption, reply_markup=kb if buttons else None)

async def send_photo_or_text_with_buttons(uid: int, image_name: str, caption: str, buttons: list):
"""Similar helper for text+buttons or photo+buttons in single message"""
await send_photo_with_buttons(uid, image_name, caption, buttons)

fallback

@dp.message_handler()
async def fallback(message: types.Message):
await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /start. –î–ª—è –º–µ–Ω—é –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")

---------------- webhook startup/shutdown ----------------

async def on_startup(dp: Dispatcher):
# ensure no previous webhook
try:
await bot.delete_webhook()
logger.info("Deleted old webhook (if existed).")
except Exception:
logger.exception("Error deleting webhook (ignored).")

# set new webhook
# WEBHOOK_URL must be full URL that Telegram will post to
await bot.set_webhook(WEBHOOK_URL)
logger.info(f"Webhook set to {WEBHOOK_URL}")


async def on_shutdown(dp: Dispatcher):
logger.info("Shutting down, removing webhook")
try:
await bot.delete_webhook()
except Exception:
logger.exception("Error deleting webhook during shutdown")
await bot.session.close()

if name == "main":
logger.info("Starting webhook (Render mode).")
# webhook_path is extracted from WEBHOOK_URL; aiogram will route posts to that path
# Provide webhook_path param consistent with WEBHOOK_URL; simplest is to pass full path from URL:
# Extract path portion for webhook_path param:
from urllib.parse import urlparse
parsed = urlparse(WEBHOOK_URL)
webhook_path = parsed.path # e.g. /webhook/<token>
# aiogram expects path without domain; use webhook_path
executor.start_webhook(
dispatcher=dp,
webhook_path=webhook_path,
on_startup=on_startup,
on_shutdown=on_shutdown,
host="0.0.0.0",
port=PORT,
)
:::