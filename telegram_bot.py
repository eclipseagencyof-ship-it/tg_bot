# telegram_bot.py
import logging
import os
from pathlib import Path
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ParseMode
)
from dotenv import load_dotenv
from aiohttp import web

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–∞–ø–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫/–≤–∏–¥–µ–æ
IMAGES_DIR = Path("images")
RESULTS_DIR = Path("results")
RESULTS_DIR.mkdir(exist_ok=True)

# --- WEB SERVER RUNNER (–¥–ª—è Render) ---
web_runner = None  # will hold aiohttp AppRunner

async def web_index(request):
    return web.Response(text="OK ‚Äî bot is running")

async def start_web_app():
    """Start aiohttp web app on PORT (Render provides PORT env var)."""
    global web_runner
    port = int(os.getenv("PORT", "10000"))
    app = web.Application()
    app.router.add_get("/", web_index)
    web_runner = web.AppRunner(app)
    await web_runner.setup()
    site = web.TCPSite(web_runner, "0.0.0.0", port)
    await site.start()
    logger.info(f"Web server started on 0.0.0.0:{port}")

async def stop_web_app():
    global web_runner
    if web_runner:
        try:
            await web_runner.cleanup()
            logger.info("Web server stopped")
        except Exception as e:
            logger.exception("Error stopping web server: %s", e)
        web_runner = None

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_onlyfans = State()
    quiz_waiting_answer = State()
    objections_menu = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
btn_conditions = KeyboardButton("‚≠ê–ú–Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è‚≠ê")
keyboard_conditions = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_conditions)

btn_yes = KeyboardButton("–î–∞")
btn_no = KeyboardButton("–ù–µ—Ç")
keyboard_yes_no = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_yes, btn_no)


# --- –•–µ–ª–ø–µ—Ä—ã –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ ---
def input_file_safe(path: Path):
    if path.exists():
        return InputFile(str(path))
    return None

async def send_photo_or_text(chat_id: int, image_name: str, caption: str):
    p = IMAGES_DIR / image_name
    f = input_file_safe(p)
    if f:
        await bot.send_photo(chat_id, photo=f, caption=caption, parse_mode=ParseMode.HTML)
    else:
        await bot.send_message(chat_id, caption, parse_mode=ParseMode.HTML)


# --- –•–µ–Ω–¥–ª–µ—Ä /start ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    # greeting with image if available
    welcome_img = IMAGES_DIR / "welcome.jpg"
    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ Eclipse Agency!</b> üåë\n\n"
        "–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –≥–∏–¥–æ–º –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ —Ä–æ–ª–∏ <b>–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, "
        "–∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–≤—è–∑—å, —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "<b>–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n"
        "üí∞ 20% –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂\n"
        "üïó –ì–∏–±–∫–∏–π 8-—á–∞—Å–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫\n"
        "üìÜ 1 –≤—ã—Ö–æ–¥–Ω–æ–π –≤ –Ω–µ–¥–µ–ª—é\n"
        "üí∏ –í—ã–ø–ª–∞—Ç—ã ‚Äî 7 –∏ 22 —á–∏—Å–ª–∞ (USDT)\n"
        "‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (~5%) –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º"
    )
    if welcome_img.exists():
        await bot.send_photo(message.chat.id, photo=InputFile(str(welcome_img)), caption=caption, parse_mode=ParseMode.HTML)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ Eclipse Agency! üåë\n\n" + caption, parse_mode=ParseMode.HTML)

    await bot.send_message(message.chat.id,
                           "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è?\n\n"
                           "üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ ‚Äî –¥–æ 23% –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ KPI\n"
                           "üë• –†–æ–ª—å Team Lead ‚Äî +1% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã (3 —á–µ–ª–æ–≤–µ–∫–∞)\n"
                           "üéØ –ë–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî –≤—ã–ø–ª–∞—Ç—ã –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É\n"
                           "üöÄ –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç ‚Äî –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                           "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è üëá",
                           reply_markup=keyboard_conditions)


# --- FSM: agree conditions ---
@dp.message_handler(lambda message: message.text == "‚≠ê–ú–Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è‚≠ê")
async def agree_conditions(message: types.Message):
    await message.answer(
        "‚ùóÔ∏è–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –£—Å–ª–æ–≤–∏–µ –Ω–∏–∂–µ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π)!\n\n"
        "‚Äî –ï—Å–ª–∏ —Ç—ã —Ä–µ—à–∏—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π "
        "—Å –º–æ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ ‚Äî –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )
    await Form.waiting_for_name.set()

@dp.message_handler(state=Form.waiting_for_name, content_types=types.ContentTypes.TEXT)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await message.answer(f"–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, {name}! üåü\n\n{name}, —Ç—ã –∑–Ω–∞–∫–æ–º(-–∞) —Å —Ä–∞–±–æ—Ç–æ–π –Ω–∞ OnlyFans?",
                         reply_markup=keyboard_yes_no)
    await Form.waiting_for_onlyfans.set()

@dp.message_handler(state=Form.waiting_for_onlyfans, content_types=types.ContentTypes.TEXT)
async def process_onlyfans_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name", "–¥—Ä—É–≥")
    if message.text == "–î–∞":
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name}! –¢–æ–≥–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ ‚úÖ")
    elif message.text == "–ù–µ—Ç":
        await message.answer(f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, {name}, —è –≤—Å—ë –æ–±—ä—è—Å–Ω—é —Å –Ω—É–ª—è üòâ")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏: –î–∞ –∏–ª–∏ –ù–µ—Ç", reply_markup=keyboard_yes_no)
        return

    await state.finish()

    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–ê –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?", callback_data="earn_money"))
    await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å üí∏", reply_markup=keyboard)


# --- Earn money flow ---
@dp.callback_query_handler(lambda c: c.data == "earn_money")
async def cb_earn_money(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text1 = (
        "–ï—â—ë —Å–æ –≤—Ä–µ–º—ë–Ω –±—Ä–∞—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤ —è –Ω–∞—É—á–∏–ª—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –ª—é–±—É—é –¥–µ—Ç–∞–ª—å "
        "–≤ —Ç–æ—á–∫—É –æ–ø–æ—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –¢—ã —Å–ø—Ä–æ—Å–∏—à—å –∫–∞–∫? –í—Å—ë –ø—Ä–æ—Å—Ç–æ:\n\n"
        "–£–∑–Ω–∞–ª –∏–º—è? ‚Äî –∑–∞–≥—É–≥–ª–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.\n"
        "–ï—â—ë –∏ —Ñ–∞–º–∏–ª–∏—é? ‚Äî –Ω–∞—à—ë–ª —Ñ–æ—Ç–æ, –∑–∞–∫–∏–Ω—É–ª —à—É—Ç–∫—É: ¬´–≠—Ç–æ –Ω–µ —Ç—ã –≥–æ–Ω—è–ª –Ω–∞ –±–∞–π–∫–µ –≤ –ë—Ä—É–∫–ª–∏–Ω–µ?¬ª\n"
        "–§–∞–Ω —Ä–∞—Å—Å–∫–∞–∑–∞–ª –≥–¥–µ –∂–∏–≤–µ—Ç? ‚Äî –∏–∑—É—á–∞—é –º–µ—Å—Ç–Ω—ã–µ —Ñ–∏—à–∫–∏, –ø–æ–¥–±–∏—Ä–∞—é —Ç–µ–º—É –¥–ª—è –¥–∏–∞–ª–æ–≥–∞.\n"
        "–§–∞–Ω–∞—Ç NBA? ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ –ª—é–±–∏–º—É—é –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ –∑–Ω–∞–∫–æ–º–æ–π –≤–æ–ª–Ω–µ.\n\n"
        "–õ—é–±–∞—è –º–µ–ª–æ—á—å ‚Äî –ø–æ–≤–æ–¥ –¥–ª—è —Å–±–ª–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞—Ç—å, –∞ –∑–∞–≤–æ–µ–≤–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ."
    )
    await bot.send_message(uid, text1)

    text2 = (
        "–¢—ã –±—É–¥–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ—Ç–Ω–∏ –∏—Å—Ç–æ—Ä–∏–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—å—é –∏ –∫–ª–∏–µ–Ω—Ç–æ–º üôå\n\n"
        "–£ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å ‚Äî —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–æ, –æ—Ç —á–µ–≥–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è.\n\n"
        "–§–æ—Ä–º—É–ª–∞ –ø—Ä–æ—Å—Ç–∞:\n–ò–Ω—Ñ–æ –æ —Ñ–∞–Ω–∞—Ç–µ + –≤–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ = –ø—Ä–∏–±—ã–ª—å üìà"
    )
    await bot.send_message(uid, text2)

    text3 = "–ü–∏—à–∏ –∫–ª–∏–µ–Ω—Ç–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å. –ö–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø–æ—è–≤—è—Ç—Å—è ‚Äî –æ–Ω–∏ –≤—Å–ø–æ–º–Ω—è—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è ‚ù§Ô∏è‚Äçü©π"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–¥–µ –∏ –∫–∞–∫ –∏—Å–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ ?", callback_data="find_clients"))
    await bot.send_message(uid, text3, reply_markup=kb)


# --- Find clients flow ---
@dp.callback_query_handler(lambda c: c.data == "find_clients")
async def cb_find_clients(cq: types.CallbackQuery):
    uid = cq.from_user.id
    # photo + caption
    caption1 = (
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –Ω–∞ —Ä—ã–±–∞–ª–∫–µ: —É–ª–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–∂–∏–≤–∫–∏. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ ‚Äî —ç—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ñ–∞–Ω–∞–º.\n\n"
        "–§–∞–Ω —É–∂–µ –≤–∏–¥–µ–ª —Å–æ—Ç–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –∫–ª—é–Ω—É–ª –Ω–∞ —Ç–≤–æ—ë.\n\n"
        "–î–æ–±–∞–≤–ª—è–π —Å–ª–µ–Ω–≥, —Å–æ–∫—Ä–∞—â–∞–π, –º–µ–Ω—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –∂–∏–≤–æ –∏ –ø–æ-—Å–≤–æ–µ–º—É."
    )
    await send_photo_or_text(uid, "fishing.jpg", caption1)

    text2 = (
        "–î–∞, OnlyFans ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –ø—Ä—è–º—ã–º–∏ –∏–ª–∏ –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–º–∏ üîû\n\n"
        "–û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π —Å–ø–∞–º –±—ã—Å—Ç—Ä–æ —É–±–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å. –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–Ω–æ—Å—è—Ç –≤–∞—Å –≤ —Å–ø–∏—Å–æ–∫ ¬´–µ—â—ë –æ–¥–Ω–æ–π —à–ª—é—Ö–∏¬ª ‚Äî –∞ —Ç–∞–∫–∏–µ –Ω–µ —Ü–µ–ø–ª—è—é—Ç –∏ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –∂–µ–ª–∞–Ω–∏—è –ø–ª–∞—Ç–∏—Ç—å üí∏\n\n"
        "–†–∞–±–æ—Ç–∞–π —Ç–æ–Ω–∫–æ: –ª—ë–≥–∫–∞—è —ç—Ä–æ—Ç–∏–∫–∞, –Ω–∞–º—ë–∫–∏, –∏–≥—Ä–∞ —Å –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."
    )
    await bot.send_message(uid, text2)

    text3 = (
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º 3 —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n"
        "‚úîÔ∏è VIP ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º\n"
        "‚úîÔ∏è –û–Ω–ª–∞–π–Ω ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ —Å–µ—Ç–∏\n"
        "‚úîÔ∏è –ú–∞—Å—Å–æ–≤–∞—è ‚Äî –æ—Ö–≤–∞—Ç –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫—Ä–æ–º–µ VIP\n\n"
        "–ö–∞–∂–¥—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî —ç—Ç–æ —Å–≤–æ–π –ø–æ–¥—Ö–æ–¥ –∏ —à–∞–Ω—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É."
    )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ó–∞—á–µ–º –Ω—É–∂–Ω—ã —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏?", callback_data="diff_mailings"))
    await bot.send_message(uid, text3, reply_markup=kb)


# --- Diff mailings ---
@dp.callback_query_handler(lambda c: c.data == "diff_mailings")
async def cb_diff_mailings(cq: types.CallbackQuery):
    uid = cq.from_user.id
    await send_photo_or_text(uid, "vip.jpg", "VIP-–∫–ª–∏–µ–Ω—Ç–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω–∏ –ø–ª–∞—Ç—è—Ç –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ, –∞ –Ω–µ –∑–∞ —à–∞–±–ª–æ–Ω.")
    await send_photo_or_text(uid, "online.jpg", "–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω ‚Äî —ç—Ç–æ –ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –≤—ã—à–µ.")
    await send_photo_or_text(uid, "mass.jpg", "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äî –¥–ª—è –≤—Å–µ—Ö. –ü–∏—à–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏ —Å –ª—ë–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º.")
    kb = InlineKeyboardMarkup().row(
        InlineKeyboardButton("–Ø –≤—Å—ë –ø–æ–Ω—è–ª", callback_data="understood"),
        InlineKeyboardButton("–ú–æ–∂–Ω–æ –µ—â—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?", callback_data="understood")
    )
    await bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)


# --- Understood -> continue ---
@dp.callback_query_handler(lambda c: c.data == "understood")
async def cb_understood(cq: types.CallbackQuery):
    uid = cq.from_user.id
    await bot.send_message(uid, "üéØ –ò–∑–±–µ–≥–∞–π –±–∞–Ω–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤—Ä–æ–¥–µ 'Hi, how are u?'. –ö–ª–∏–µ–Ω—Ç—ã —Ü–µ–Ω—è—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å.")
    await bot.send_message(uid, "‚úÖ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç–∞—Ä—Ç–æ–≤:\n- –û–≥–æ, —ç—Ç–æ —Ç—ã? –Ø —Ç–µ–±—è –∂–¥–∞–ª–∞!\n- –°–ª—É—à–∞–π, –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç! –ö—Ä–∞—Å–Ω—ã–π –∏–ª–∏ —á—ë—Ä–Ω—ã–π?\n- –ê —Ç—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø—Ä–æ–±–æ–≤–∞–ª —Å–µ–∫—Å –ø–æ—Å–ª–µ –≤–¥–æ—Ö–∞ –≥–µ–ª–∏—è? üòâ")
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞", callback_data="questions_start"))
    await bot.send_message(uid, "–î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ?", reply_markup=kb)


# --- Questions start (move to –ü–û / teamwork choice) ---
@dp.callback_query_handler(lambda c: c.data == "questions_start")
async def cb_questions_start(cq: types.CallbackQuery):
    uid = cq.from_user.id
    await bot.send_message(uid, "–°–µ–π—á–∞—Å –∑–∞–∫—Ä–µ–ø–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª. –û—Ç–≤–µ—á–∞–π —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ò–ò.")
    await bot.send_message(uid, "üôã –ù–∞ —á—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω—É–∂–Ω–æ –æ–ø–∏—Ä–∞—Ç—å—Å—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?")
    await bot.send_message(uid, "üôã –ú–æ–∂–Ω–æ –ª–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ—á–µ–º—É?")
    await bot.send_message(uid, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–∞—Å—Å—ã–ª–∫—É –∫–ª–∏–µ–Ω—Ç—É: –°–∞–π–º–æ–Ω, —É –Ω–µ–≥–æ 3-—Ö –ª–µ—Ç–Ω—è—è –¥–æ—á—å, –æ–Ω –ª—é–±–∏—Ç –±–∞—Å–∫–µ—Ç–±–æ–ª üèÄ")

    photo = IMAGES_DIR / "teamwork.jpg"
    kb = InlineKeyboardMarkup().row(
        InlineKeyboardButton("üåü–ü–û", callback_data="soft"),
        InlineKeyboardButton("üåü–ö–æ–º–∞–Ω–¥–Ω–∞—è –†–∞–±–æ—Ç–∞", callback_data="teamwork")
    )
    if photo.exists():
        await bot.send_photo(uid, photo=InputFile(str(photo)), caption="–¢–µ–ø–µ—Ä—å –æ–±—Å—É–¥–∏–º –ü–û –∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É ü§ñ", reply_markup=kb)
    else:
        await bot.send_message(uid, "–¢–µ–ø–µ—Ä—å –æ–±—Å—É–¥–∏–º –ü–û –∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É ü§ñ", reply_markup=kb)


# === –í–¢–û–†–ê–Ø –ß–ê–°–¢–¨: –ü–û –∏ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ===

@dp.callback_query_handler(lambda c: c.data == "soft")
async def cb_soft(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "üü© –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Onlymonster.\n\n"
        "–ú—ã —Å —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ ‚Äî —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –µ—â—ë –≤ –ø–µ—Ä–≤—ã—Ö —Ç–µ—Å—Ç–∞—Ö, –∫–æ–≥–¥–∞ –æ–Ω –±—ã–ª –≤—Å–µ–≥–æ –ª–∏—à—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º.\n\n"
        "–¢–µ–ø–µ—Ä—å —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–ª–æ–∂–µ–Ω–æ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
        "üíª –°–∫–∞—á–∞–π: https://onlymonster.ai/downloads  (–ù–ï —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è ‚Äî –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è)"
    )
    await bot.send_message(uid, text)
    # try to send video if exists
    video_path = IMAGES_DIR / "onlymonster_intro.mp4"
    if video_path.exists():
        await bot.send_video(uid, video=InputFile(str(video_path)), caption="–í–∏–¥–µ–æ (8 –º–∏–Ω—É—Ç) —Å –æ—Å–Ω–æ–≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã –≤ Onlymonster.")
    else:
        await bot.send_message(uid, "–í–∏–¥–µ–æ —Å –æ—Å–Ω–æ–≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã –≤ Onlymonster (8 –º–∏–Ω—É—Ç) ‚Äî —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ images/.")

    await bot.send_message(uid, "–ò –≤–æ—Ç —Ç–µ–±–µ –≤–∏–¥–µ–æ (–Ω–∞ 8 –º–∏–Ω—É—Ç) —Å –æ—Å–Ω–æ–≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã –≤ Onlymonster. –Ø –∑–Ω–∞—é —á—Ç–æ –º–Ω–æ–≥–∏–µ –Ω–µ –¥–æ—Å–º–æ—Ç—Ä—è—Ç, –Ω–æ –¥–æ—Å–º–æ—Ç—Ä–µ–≤—à–∏–µ –±—É–¥—É—Ç –∏–º–µ—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ.")
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ê —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –∫–æ–º–∞–Ω–¥–µ ?", callback_data="team_from_soft"))
    await bot.send_message(uid, "üí∏ –£—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –≤—Ç–æ—Ä–∞—è –∫–ª—é—á–µ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç Google.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "team_from_soft")
async def cb_team_from_soft(cq: types.CallbackQuery):
    uid = cq.from_user.id
    photo = IMAGES_DIR / "team.jpg"
    caption = (
        "ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –æ—Å–Ω–æ–≤–∞ —É—Å–ø–µ—Ö–∞.\n\n"
        "üîπ –î–æ–≤–µ—Ä–∏–µ ‚Äî –≤—ã–ø–æ–ª–Ω—è–π –æ–±–µ—â–∞–Ω–∏—è\n"
        "üîπ –û–±—â–µ–Ω–∏–µ ‚Äî —Ä–µ—à–∞–π –≤–æ–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É\n"
        "üîπ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–æ–ª–µ–π ‚Äî –∑–Ω–∞–π –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\n"
        "üîπ –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n"
        "üîπ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –æ—Ç–≤–µ—á–∞–π –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    )
    if photo.exists():
        await bot.send_photo(uid, photo=InputFile(str(photo)), caption=caption)
    else:
        await bot.send_message(uid, caption)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚≠ê–ß—Ç–æ –¥–∞–ª—å—à–µ?‚≠ê", callback_data="what_next_after_soft"))
    await bot.send_message(uid, "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "what_next_after_soft")
async def cb_what_next_after_soft(cq: types.CallbackQuery):
    uid = cq.from_user.id
    # same options as if user pressed teamwork first
    await teamwork_flow(uid)

@dp.callback_query_handler(lambda c: c.data == "teamwork")
async def cb_teamwork(cq: types.CallbackQuery):
    uid = cq.from_user.id
    await teamwork_flow(uid)

async def teamwork_flow(uid: int):
    photo = IMAGES_DIR / "team.jpg"
    caption = (
        "ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –æ—Å–Ω–æ–≤–∞ —É—Å–ø–µ—Ö–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –Ω–∞—à–µ–π —Å—Ñ–µ—Ä–µ.\n\n"
        "üîπ –î–æ–≤–µ—Ä–∏–µ ‚Äî –≤—ã–ø–æ–ª–Ω—è–π –æ–±–µ—â–∞–Ω–∏—è\n"
        "üîπ –û–±—â–µ–Ω–∏–µ ‚Äî —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π —Å –∫–æ–ª–ª–µ–≥–∞–º–∏\n"
        "üîπ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–æ–ª–µ–π ‚Äî –∑–Ω–∞–π, –∫—Ç–æ –∑–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç\n"
        "üîπ –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å ‚Äî —É–≤–∞–∂–∞–π –º–Ω–µ–Ω–∏—è\n"
        "üîπ –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ ‚Äî –¥–µ–ª–∏—Å—å –æ–ø—ã—Ç–æ–º\n"
        "üîπ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –æ—Ç–≤–µ—á–∞–π –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    )
    if photo.exists():
        await bot.send_photo(uid, photo=InputFile(str(photo)), caption=caption)
    else:
        await bot.send_message(uid, caption)

    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π–¥–µ–º –∫ –ü–û", callback_data="soft"))
    await bot.send_message(uid, "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ü–û?", reply_markup=kb)


# === –¢–†–ï–¢–¨–Ø –ß–ê–°–¢–¨: –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ===

# Menu for objections
@dp.callback_query_handler(lambda c: c.data == "start_objections")
async def cb_start_objections(cq: types.CallbackQuery):
    uid = cq.from_user.id
    await send_objections_menu(uid)

async def send_objections_menu(uid: int):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–≠—Ç–æ –¥–æ—Ä–æ–≥–æ!", callback_data="obj_expensive"),
        InlineKeyboardButton("–ü–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ç—å —Ç–µ–±–µ?", callback_data="obj_trust"),
        InlineKeyboardButton("–ê —Ç—ã –Ω–µ –æ–±–º–∞–Ω–µ—à—å –º–µ–Ω—è?", callback_data="obj_scam"),
        InlineKeyboardButton("–£ –º–µ–Ω—è –≤—Å–µ–≥–æ 10$", callback_data="obj_10"),
        InlineKeyboardButton("–Ø —Ö–æ—á—É –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å", callback_data="obj_love"),
        InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data="obj_rules_platform"),
        InlineKeyboardButton("–ó–∞–ø—Ä–µ—Ç—ã –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞", callback_data="obj_rules_agency"),
        InlineKeyboardButton("–ß–µ–∫-–ª–∏—Å—Ç", callback_data="obj_checklist"),
        InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_quiz")
    )
    await bot.send_message(uid, "üî• –¢–æ–ø-5 –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π:\n1. –≠—Ç–æ –¥–æ—Ä–æ–≥–æ!\n2. –ü–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ç—å —Ç–µ–±–µ?\n3. –ê —Ç—ã –Ω–µ –æ–±–º–∞–Ω–µ—à—å –º–µ–Ω—è?\n4. –£ –º–µ–Ω—è –≤—Å–µ–≥–æ –ª–∏—à—å 10$...\n5. –Ø –Ω–µ —Ö–æ—á—É –Ω–∏—á–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç—å, —è —Ö–æ—á—É –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å.\n\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–≤–µ—Ç—ã:", reply_markup=kb)

# handle each objection callback
@dp.callback_query_handler(lambda c: c.data == "obj_expensive")
async def cb_obj_expensive(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç '–≠—Ç–æ –¥–æ—Ä–æ–≥–æ' ‚Äî —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–µ—Ç —Ä–∞–ø–ø–æ—Ä—Ç–∞, –¥–æ–≤–µ—Ä–∏—è.\n\n"
        "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–∞–º –ø–æ —Å–µ–±–µ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç. –ü—Ä–æ–¥–∞—ë—Ç ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—â—É—â–µ–Ω–∏–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä –ø–ª–æ—Ö–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n"
        "–ú–∏–ª—ã–π, –º–æ–∏ –¥–≤–∞ —Ñ–æ—Ç–æ –ø–æ–¥–Ω–∏–º—É—Ç —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ üòè\n\n"
        "–ü—Ä–∏–º–µ—Ä —Å–∏–ª—å–Ω–æ–≥–æ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π + —Å—é–∂–µ—Ç):\n"
        "(–ò–º—è), –Ω–∞ –ø–µ—Ä–≤–æ–º —Ñ–æ—Ç–æ —è –±—É–∫–≤–∞–ª—å–Ω–æ –æ–±–Ω–∞–∂–∏–ª–∞—Å—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ–º, –Ω–æ –∏ –¥—É—à–æ–π... –µ—â—ë –∏ –≤ —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –ø–æ–∑–µ. –£–≥–∞–¥–∞–µ—à—å –∫–∞–∫–∞—è?\n\n"
        "‚úÖ –ó–¥–µ—Å—å: –æ–±—Ä–∞—â–∞–µ–º—Å—è –ø–æ –∏–º–µ–Ω–∏, –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Å—é–∂–µ—Ç, –≤–æ–∑–±—É–∂–¥–∞–µ–º —Ñ–∞–Ω—Ç–∞–∑–∏—é, —Å–æ–∑–¥–∞—ë–º —Ü–µ–Ω–Ω–æ—Å—Ç—å."
    )
    await bot.send_message(uid, text)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ö–∞–∫ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã?", callback_data="obj_expensive_options"))
    await bot.send_message(uid, "–•–æ—á–µ—à—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —à–∞–±–ª–æ–Ω—ã?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_expensive_options")
async def cb_obj_expensive_options(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "üí° –ö–∞–∫ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n"
        "üëâ 2 —Ñ–æ—Ç–æ + –≤–∏–¥–µ–æ-–¥—Ä–∞–∑–Ω–∏–ª–∫–∞ –∑–∞ $25\n"
        "üëâ 2‚Äì3 —Ñ–æ—Ç–æ –∑–∞ $20\n\n"
        "–ò–ª–∏ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è: '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è, –ø–æ—ç—Ç–æ–º—É –¥–∞–º –≤—ã–±–æ—Ä: —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å?'"
    )
    await bot.send_message(uid, text)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", callback_data="start_objections"))
    await bot.send_message(uid, "–í–µ—Ä–Ω—É—Ç—å—Å—è?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_trust")
async def cb_obj_trust(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "üß† '–ü–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–∏—Ç—å —Ç–µ–±–µ?'\n\n"
        "–ù–µ –¥–∞–≤–∏, –Ω–µ —Å–ø–æ—Ä—å. –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n\n"
        "‚Äî '–ü–æ —Ç–æ–π –∂–µ –ø—Ä–∏—á–∏–Ω–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —è –¥–æ–≤–µ—Ä—è—é —Ç–µ–±–µ –∏ –≤–µ—Ä—é, —á—Ç–æ –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏. –ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?'\n\n"
        "‚Äî '–¢—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ—à—å –º–Ω–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ–±—è –∫—Ç–æ-—Ç–æ –æ–±–º–∞–Ω—ã–≤–∞–ª —Ä–∞–Ω–µ–µ? –ò–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Ç–æ—Ä–≥—É–µ—à—å—Å—è?'"
    )
    await bot.send_message(uid, text)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", callback_data="start_objections"))
    await bot.send_message(uid, "–í–µ—Ä–Ω—É—Ç—å—Å—è?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_scam")
async def cb_obj_scam(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "üí¨ '–ê —Ç—ã –Ω–µ –æ–±–º–∞–Ω–µ—à—å –º–µ–Ω—è? –ú–Ω–µ —á–∞—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ —Ç–æ, —á—Ç–æ –æ–±–µ—â–∞—é—Ç.'\n\n"
        "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n\n"
        "1) –ß–µ—Å—Ç–Ω–æ—Å—Ç—å + –ª–æ–≥–∏–∫–∞:\n"
        "\"–ú–æ–∂–Ω–æ —è –±—É–¥—É —Å —Ç–æ–±–æ–π –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–π? –ù–∞—à–µ –æ–±—â–µ–Ω–∏–µ ‚Äî –∫–∞–∫ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã –æ–±–∞ –ø–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–∏ –∏ –∫–∞–π—Ñ. –ó–∞—á–µ–º –º–Ω–µ –æ–±–º–∞–Ω—ã–≤–∞—Ç—å —Ç–µ–±—è —Ä–∞–¥–∏ $30?\" üòÇ\n\n"
        "2) –§–ª–∏—Ä—Ç + —é–º–æ—Ä:\n"
        "\"–¢—ã –Ω–µ –∑–∞–º–µ—Ç–∏–ª, –Ω–æ —è —É–∂–µ –æ–±–º–∞–Ω—É–ª–∞ —Ç–µ–±—è...\" ‚Äî –∏ –¥–∞–ª—å—à–µ –ª—ë–≥–∫–∞—è –∏–≥—Ä–∞."
    )
    await bot.send_message(uid, text)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", callback_data="start_objections"))
    await bot.send_message(uid, "–í–µ—Ä–Ω—É—Ç—å—Å—è?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_10")
async def cb_obj_10(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "‚ùóÔ∏è '–£ –º–µ–Ω—è –≤—Å–µ–≥–æ 10$' ‚Äî –Ω–µ –∑–ª–∏—Å—å –∏ –Ω–µ —É–Ω–∏–∂–∞–π –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
        "–í–∞—Ä–∏–∞–Ω—Ç –º—è–≥–∫–æ–π –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏:\n"
        "\"–ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ —Ç—ã –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π —Å–æ –º–Ω–æ–π. –ú–æ–≥—É —è –±—ã—Ç—å —á–µ—Å—Ç–Ω–æ–π? –°–∫–∞–∂–∏, —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥—É–º–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∏—Ç—å—Å—è –≤—Å–µ–º –∑–∞ $10 –Ω–æ—Ä–º–∞–ª—å–Ω–æ?\""
    )
    await bot.send_message(uid, text)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", callback_data="start_objections"))
    await bot.send_message(uid, "–í–µ—Ä–Ω—É—Ç—å—Å—è?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_love")
async def cb_obj_love(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "üíå '–Ø —Ö–æ—á—É –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å' ‚Äî –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –Ω–∏–∫–∞–∫–∏—Ö –æ–±–µ—â–∞–Ω–∏–π –æ —Ä–µ–∞–ª—å–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ.\n\n"
        "–û—Ç–≤–µ—Ç:\n"
        "\"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω–∞ —Å–∞–π—Ç–µ, –≥–¥–µ –º—É–∂—á–∏–Ω—ã –ø–æ–∫—É–ø–∞—é—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å?\"\n\n"
        "–î–∞–ª—å—à–µ –º—è–≥–∫–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞–º–∫–∏: –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏, –∏ —Ç—Ä—É–¥/–≤—Ä–µ–º—è –º–æ–¥–µ–ª–∏ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è."
    )
    await bot.send_message(uid, text)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", callback_data="start_objections"))
    await bot.send_message(uid, "–í–µ—Ä–Ω—É—Ç—å—Å—è?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_rules_platform")
async def cb_obj_rules_platform(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "üö´ –ü—Ä–∞–≤–∏–ª–∞ OnlyFans (–æ—Å–Ω–æ–≤–Ω–æ–µ):\n"
        "- –ù–∏–∫–∞–∫–∏—Ö –ª–∏—Ü –º–ª–∞–¥—à–µ 18 –ª–µ—Ç\n"
        "- –ù–∏–∫–∞–∫–æ–≥–æ –Ω–∞—Å–∏–ª–∏—è/–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏—è/–±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è\n"
        "- –ù–∏–∫–∞–∫–æ–π –∑–æ–æ—Ñ–∏–ª–∏–∏\n"
        "- –ù–µ –ø—É–±–ª–∏–∫—É–π —á—É–∂–∏–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç.–¥.\n\n"
        "–°–º–æ—Ç—Ä–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –ø–æ–º–Ω–∏ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö."
    )
    await bot.send_message(uid, text)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞", callback_data="obj_rules_agency"))
    await bot.send_message(uid, "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∞–≤–∏–ª–∞–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_rules_agency")
async def cb_obj_rules_agency(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ —Ü–µ–Ω–∏—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É. –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ ‚Äî —à—Ç—Ä–∞—Ñ—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ.\n"
        "–ß–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –¥–µ–ª—É ‚Äî –≤—Å–µ–≥–¥–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ."
    )
    await bot.send_message(uid, text)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ß–µ–∫-–ª–∏—Å—Ç –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", callback_data="obj_checklist"))
    await bot.send_message(uid, "–î–∞–ª—å—à–µ?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "obj_checklist")
async def cb_obj_checklist(cq: types.CallbackQuery):
    uid = cq.from_user.id
    text = (
        "üéâ –í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º –¥–ª—è —Å–º–µ–Ω—ã.\n"
        "–ß–µ–∫-–ª–∏—Å—Ç ‚Äî –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–∞–∂–¥—É—é —Å–º–µ–Ω—É (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å, —Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏, VIP, –æ–Ω–ª–∞–π–Ω –∏ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.)."
    )
    await bot.send_message(uid, text)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_quiz"))
    await bot.send_message(uid, "–ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?", reply_markup=kb)


# === QUIZ / TEST SEQUENCE ===
QUIZ_QUESTIONS = [
    "üôã –ù–∞ —á—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω—É–∂–Ω–æ –æ–ø–∏—Ä–∞—Ç—å—Å—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?",
    "üôã –ú–æ–∂–Ω–æ –ª–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ—á–µ–º—É?",
    "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–∞—Å—Å—ã–ª–∫—É –∫–ª–∏–µ–Ω—Ç—É. (–ü—Ä–∏–º–µ—Ä: –°–∞–π–º–æ–Ω, —É –Ω–µ–≥–æ 3-—Ö –ª–µ—Ç–Ω—è—è –¥–æ—á—å, –∏ –æ–Ω —É–≤–ª–µ–∫–∞–µ—Ç—Å—è –±–∞—Å–∫–µ—Ç–±–æ–ª–æ–º.)",
    "–ü–æ—Å–ª–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –º—É–∂—á–∏–Ω–æ–π —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, –æ–Ω –ø–∏—à–µ—Ç: '–Ø –¥—É–º–∞–ª —Ç—ã –ø–æ–∫–∞–∂–µ—à—å –º–Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ...' ‚Äî –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—à—å?",
    "VIP 100-500$ –Ω–µ –æ—Ç–∫—Ä—ã–ª –ø–ª–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ, –ø–∏—à–µ—Ç: '–£ –º–µ–Ω—è –Ω–µ—Ç –¥–µ–Ω–µ–≥' ‚Äî —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—à—å?",
    "VIP 500-1000$ –∫—É–ø–∏–ª –≤–∏–¥–µ–æ –∑–∞ $80 –∏ –ø—Ä–æ—Å–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ ‚Äî –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—à—å?",
    "–ö–ª–∏–µ–Ω—Ç: '–Ø –ø–æ–ª—É—á—É –¥–µ–Ω—å–≥–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –ø–æ–∫–∞–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ?' ‚Äî —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—à—å?",
    "–ö–ª–∏–µ–Ω—Ç: '–ö–∞–∫ –¥–µ–ª–∞?' ‚Äî –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ –Ω–µ –∑–∞—Å—Ç—Ä—è–ª?",
    "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫—Ä—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω ‚Äî —Ö–æ—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç. –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å?",
    "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–¥–µ–ª—å –Ω–µ –¥–µ–ª–∞–µ—Ç (–Ω–∞–µ–∑–¥–Ω–∏—Ü–∞ —Å –¥–∏–ª–¥–æ) ‚Äî –∫–∞–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –ø–æ–∫—É–ø–∫—É?",
    "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å—Ä–∞–∑—É —Ç—Ä–µ–±—É–µ—Ç —Å–∞–º—ã–π –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ‚Äî –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—à—å?"
]

user_quiz_data = {}  # user_id -> {"q_index": int, "answers": []}

@dp.callback_query_handler(lambda c: c.data == "start_quiz")
async def cb_start_quiz(cq: types.CallbackQuery):
    uid = cq.from_user.id
    user_quiz_data[uid] = {"q_index": 0, "answers": []}
    await bot.send_message(uid, "üîé –¢–µ—Å—Ç –Ω–∞—á–∞—Ç. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ, —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –ü–æ–µ—Ö–∞–ª–∏!")
    await bot.send_message(uid, QUIZ_QUESTIONS[0])
    await Form.quiz_waiting_answer.set()

@dp.message_handler(state=Form.quiz_waiting_answer, content_types=types.ContentTypes.TEXT)
async def process_quiz_answer(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    data = user_quiz_data.get(uid)
    if not data:
        await message.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–∂–º–∏ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' –≤ –º–µ–Ω—é.")
        await state.finish()
        return

    q_index = data["q_index"]
    ans = message.text.strip()
    data["answers"].append({"question": QUIZ_QUESTIONS[q_index], "answer": ans})
    q_index += 1
    data["q_index"] = q_index
    user_quiz_data[uid] = data

    if q_index < len(QUIZ_QUESTIONS):
        await bot.send_message(uid, QUIZ_QUESTIONS[q_index])
        return
    else:
        await state.finish()
        save_path = RESULTS_DIR / f"{uid}_answers.txt"
        with open(save_path, "w", encoding="utf-8") as f:
            f.write("Quiz results for user_id: {}\n\n".format(uid))
            for i, qa in enumerate(data["answers"], start=1):
                f.write(f"Q{i}: {qa['question']}\n")
                f.write(f"A{i}: {qa['answer']}\n\n")
        await bot.send_message(uid, "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã.")
        await bot.send_message(uid, "–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã. –°–µ–π—á–∞—Å ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        user_name = message.from_user.first_name or "–¥—Ä—É–≥"
        final_text = (
            f"–ù—É —á—Ç–æ –∂, {user_name}, –æ—Ç–∫—Ä—ã–≤–∞–π –±—É—Ç—ã–ª–∫—É Moet Chandon üçæ ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –≤–≤–æ–¥–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è üî•\n\n"
            "–ú—ã —Å —Ç–æ–±–æ–π –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ–ª–∏ –≤—Ä–µ–º—è –∏ –¥—É–º–∞—é —Ç–µ–±–µ –ø–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å üí∏\n\n"
            "–ù–∞–ø–∏—à–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–ª —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç (–ª–∏–±–æ @loco_hr, –µ—Å–ª–∏ —Ç—ã –Ω–∞—à—ë–ª –±–æ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ), "
            "–∏ –æ–Ω –Ω–∞–ø—Ä–∞–≤–∏—Ç —Ç–µ–±—è –∫ —Ç–≤–æ–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            "–¢–æ–ø–∏ –≤–ø–µ—Ä—ë–¥ –∏ –ø–æ—Ä–≤–∏ —ç—Ç—É —Å—Ñ–µ—Ä—É üöÄ\n\n"
            "–®—É—Ç–∫–∞: –Ω–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ 50% —Å–≤–æ–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã üòâ"
        )
        await bot.send_message(uid, final_text)
        user_quiz_data.pop(uid, None)


# --- Fallback handlers / small utilities ---
@dp.message_handler(commands=['menu'])
async def cmd_menu(message: types.Message):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ú–µ–Ω—é –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ—Å—Ç", callback_data="start_objections"))
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)

@dp.message_handler(lambda message: message.text and message.text.lower() in ["–º–µ–Ω—é", "menu"])
async def text_menu(message: types.Message):
    await cmd_menu(message)

@dp.message_handler()
async def fallback(message: types.Message):
    # If user is in quiz state, message will be handled by that handler.
    await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /start –∏–ª–∏ /menu. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ‚Äî –Ω–∞–∂–º–∏ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' –≤ –º–µ–Ω—é –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π.")


# === START / SHUTDOWN HOOKS FOR aiogram + aiohttp ===
async def on_startup(dp: Dispatcher):
    # Delete webhook if exists (prevents TerminatedByOtherGetUpdates)
    try:
        await bot.delete_webhook()
        logger.info("Webhook deleted (if existed).")
    except Exception as e:
        logger.warning("Failed deleting webhook: %s", e)

    # Start web server so Render sees open port
    try:
        await start_web_app()
    except Exception as e:
        logger.exception("Failed to start web app: %s", e)

async def on_shutdown(dp: Dispatcher):
    # stop web server
    try:
        await stop_web_app()
    except Exception:
        pass

    # close bot session
    try:
        await bot.session.close()
    except Exception:
        pass

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    logger.info("Starting bot...")
    # Use on_startup/on_shutdown to run aiohttp web server concurrently with polling
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)