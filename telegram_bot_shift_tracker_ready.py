import logging
import os
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType, Message
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiohttp import web
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

WEBHOOK_HOST = os.getenv("WEBHOOK_URL") or "https://heart-1-s96h.onrender.com"
WEBHOOK_PATH = "/webhook"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–µ–±—Ö—É–∫–∞ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

try:
    OWNER_CHAT_ID = int(os.getenv("OWNER_CHAT_ID"))
except (TypeError, ValueError):
    OWNER_CHAT_ID = 7136379834 
    logging.warning("OWNER_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")

kyiv_tz = pytz.timezone("Europe/Kyiv")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º DEBUG –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s [%(levelname)s] %(message)s")

bot = Bot(token=API_TOKEN)
Bot.set_current(bot)

dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –í—Ö–æ–¥ –∏ –í—ã—Ö–æ–¥
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("+ –í—Ö–æ–¥"), KeyboardButton("- –í—ã—Ö–æ–¥"))

work_sessions = {}
scheduled_jobs = {}
user_profiles = {}
user_progress = {}

screenshot_sequence = [
    "—Å–µ—Ä–∏–∏ –Ω–∞ –æ–Ω–ª–∞–π–Ω",
    "—Å–µ—Ä–∏–∏ —á–∞—Ç–æ–≤",
    "–†–ü –¥–ª—è —Ü–µ–ª–∏ Read",
    "–†–ü –¥–ª—è —Ü–µ–ª–∏ Favourites",
    "–†–ü –¥–ª—è —Ü–µ–ª–∏ Likes"
]

inbox_messages = [
    'üì• –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –º—É–∂—á–∏–Ω —Å Inbox:\n\n–°–∫–æ–ø–∏—Ä—É–π –ø–∏—Å—å–º–æ –º—É–∂—á–∏–Ω—ã –∏ –∑–∞–¥–∞–π ChatGPT —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å:\n\n"–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç (–∏–º—è –¥–µ–≤—É—à–∫–∏), –æ–Ω–∞ –æ—á–µ–Ω—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–∞. –ù—É–∂–Ω–æ —É–¥–µ—Ä–∂–∞—Ç—å –º—É–∂—á–∏–Ω—É, –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –∑–∞–≤–µ—Å—Ç–∏ –Ω–∞ –¥–∏–∞–ª–æ–≥."',
    'üì• –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –º—É–∂—á–∏–Ω —Å Inbox:\n\n–ó–∞–¥–∞–π ChatGPT —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É:\n\n"(–ª–µ–≥–∫–∏–π —Ñ–ª–∏—Ä—Ç –∏ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å) –ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ –æ—Ç –¥–µ–≤—É—à–∫–∏ –º—É–∂—á–∏–Ω–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ª–µ–≥–∫–æ–≥–æ —Ñ–ª–∏—Ä—Ç–∞ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –≥–¥–µ –æ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —Å–∫—É—á–∞–µ—Ç, –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç —á—Ç–æ-—Ç–æ —Å–º–µ—à–Ω–æ–µ –∏–ª–∏ –º–∏–ª–æ–µ –∏–∑ –∏—Ö –æ–±—â–µ–Ω–∏—è, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–±–∞–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ —Å–µ–±—è, –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–º –±–æ–ª—å—à–µ, –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."',
    'üì• –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –º—É–∂—á–∏–Ω —Å Inbox:\n\n–ó–∞–¥–∞–π ChatGPT —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É:\n\n"(—Ç–µ–ø–ª–æ–µ, –Ω–µ–º–Ω–æ–≥–æ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ –ø–∏—Å—å–º–æ) –ù–∞–ø–∏—à–∏ –º—É–∂—á–∏–Ω–µ –æ—Ç –¥–µ–≤—É—à–∫–∏ –ø–∏—Å—å–º–æ —Å —Ç–µ–ø–ª–æ–º –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å—é, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è, —á—Ç–æ —Å–∫—É—á–∞–µ—Ç –ø–æ –Ω–µ–º—É, –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—â–µ–Ω–∏—è, –¥–µ–ª–∏—Ç—Å—è –∫–æ—Ä–æ—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Å–µ–±–µ, –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∑–∞–≤—è–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–µ–≥–∫–∏–π —Ñ–ª–∏—Ä—Ç, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —É–ª—ã–±–∫—É."',
    'üì• –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –º—É–∂—á–∏–Ω —Å Inbox:\n\n–ó–∞–¥–∞–π ChatGPT —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É:\n\n"–ù–∞–ø–∏—à–∏ –º—É–∂—á–∏–Ω–µ –ø–∏—Å—å–º–æ –æ—Ç –¥–µ–≤—É—à–∫–∏ —Å —Å–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Å—Ç—å—é –∏ –∂–µ–ª–∞–Ω–∏–µ–º. –ü—É—Å—Ç—å –æ–Ω–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è, –∫–∞–∫ —Å–∏–ª—å–Ω–æ —Å–∫—É—á–∞–µ—Ç, –∫–∞–∫ —á–∞—Å—Ç–æ –µ–≥–æ –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç —Å —Ç—Ä–µ–ø–µ—Ç–æ–º, —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —á—Ç–æ-—Ç–æ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ —Å–µ–±–µ, –∑–∞–¥–∞—Å—Ç –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∏ –∏–Ω—Ç—Ä–∏–≥—É, –∏ –¥–æ–±–∞–≤–∏—Ç —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ñ–ª–∏—Ä—Ç, —á—Ç–æ–±—ã —Ä–∞–∑–∂–µ—á—å –≤ –Ω–µ–º –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ."'
]

async def continue_screenshot_sequence(user_id: str):
    try:
        count = user_profiles.get(user_id)
        progress = user_progress.get(user_id)

        logging.debug(f"continue_screenshot_sequence called for user {user_id}: count={count}, progress={progress}")

        if not count or not progress:
            logging.debug("No user profile count or progress found, stopping sequence.")
            return

        step = progress.get("step", 0)
        profile = progress.get("profile", 1)
        inbox_step = progress.get("inbox_step", 0)

        if step >= len(screenshot_sequence):
            await bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞—Å—Å—ã–ª–∫—É, –ø–æ–≤—Ç–æ—Ä–∏–º —á–µ—Ä–µ–∑ 120 –º–∏–Ω.", reply_markup=keyboard)
            await bot.send_message(user_id, inbox_messages[inbox_step], reply_markup=keyboard)

            inbox_step = (inbox_step + 1) % len(inbox_messages)
            user_progress[user_id] = {"step": 0, "profile": 1, "inbox_step": inbox_step}
            logging.debug(f"User {user_id} inbox step updated to {inbox_step}, sequence reset.")
            return

        task = screenshot_sequence[step]
        await bot.send_message(user_id, f"üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø—É—Å–∫–∞ {task} —á–µ—Ä–µ–∑ sender.service –¥–ª—è –∞–Ω–∫–µ—Ç—ã {profile}", reply_markup=keyboard)
        logging.debug(f"Sent screenshot request to user {user_id}: task={task}, profile={profile}")

    except Exception as e:
        logging.error(f"Error in continue_screenshot_sequence for user {user_id}: {e}")

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    logging.info(f"/start received from {message.from_user.id}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ + –í—Ö–æ–¥ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É –∏ - –í—ã—Ö–æ–¥ —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å.", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "+ –í—Ö–æ–¥")
async def check_in(message: types.Message):
    user_id = str(message.from_user.id)
    now = datetime.now(kyiv_tz)
    work_sessions[user_id] = {"start": now}
    logging.info(f"User {user_id} started work session at {now}")

    await message.answer(f"üü¢ –í—ã –Ω–∞—á–∞–ª–∏ —Å–º–µ–Ω—É –≤ {now.strftime('%H:%M:%S')}.", reply_markup=keyboard)
    if OWNER_CHAT_ID:
        await bot.send_message(OWNER_CHAT_ID, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –Ω–∞—á–∞–ª —Å–º–µ–Ω—É –≤ {now.strftime('%H:%M:%S')}.")

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("1"), KeyboardButton("2"), KeyboardButton("3"), KeyboardButton("4"))

    await message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∫–µ—Ç?", reply_markup=markup)

@dp.message_handler(lambda message: message.text in ["1", "2", "3", "4"])
async def set_profile_count(message: types.Message):
    user_id = str(message.from_user.id)
    count = int(message.text)
    user_profiles[user_id] = count
    user_progress[user_id] = {"step": 0, "profile": 1, "inbox_step": 0}
    logging.info(f"User {user_id} set profile count to {count}")

    await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.", reply_markup=keyboard)
    await continue_screenshot_sequence(user_id)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ scheduler
    if user_id in scheduled_jobs:
        try:
            scheduler.remove_job(scheduled_jobs[user_id])
            logging.debug(f"Removed existing scheduled job for user {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ scheduler –¥–ª—è user {user_id}: {e}")

    job = scheduler.add_job(
        continue_screenshot_sequence,
        'interval',
        minutes=120,
        args=[user_id],
        id=user_id,
        replace_existing=True
    )
    scheduled_jobs[user_id] = job.id
    logging.debug(f"Scheduled new job for user {user_id} every 120 minutes")

@dp.message_handler(lambda message: message.text == "- –í—ã—Ö–æ–¥")
async def check_out(message: types.Message):
    user_id = str(message.from_user.id)
    now = datetime.now(kyiv_tz)

    if user_id in work_sessions:
        start_time = work_sessions[user_id]["start"]
        duration = now - start_time
        del work_sessions[user_id]
        logging.info(f"User {user_id} ended work session, duration {duration}")

        if user_id in scheduled_jobs:
            try:
                scheduler.remove_job(scheduled_jobs[user_id])
                logging.debug(f"Removed scheduled job for user {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ scheduler –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –¥–ª—è user {user_id}: {e}")
            scheduled_jobs.pop(user_id, None)

        hours, remainder = divmod(duration.total_seconds(), 3600)
        minutes = remainder // 60

        await message.answer(f"üî¥ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–º–µ–Ω—É –≤ {now.strftime('%H:%M:%S')}.", reply_markup=keyboard)
        if OWNER_CHAT_ID:
            await bot.send_message(OWNER_CHAT_ID,
                                   f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É –≤ {now.strftime('%H:%M:%S')}.\n‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(hours)} —á {int(minutes)} –º–∏–Ω.")
    else:
        await message.answer("‚ùó –í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ —Å–º–µ–Ω—É. –ù–∞–∂–º–∏—Ç–µ + –í—Ö–æ–¥.", reply_markup=keyboard)

@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in work_sessions:
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É
            await bot.send_photo(
                chat_id=OWNER_CHAT_ID,
                photo=message.photo[-1].file_id,
                caption=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç {message.from_user.full_name} ({user_id})"
            )
            await message.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω.", reply_markup=keyboard)
            logging.info(f"Received and forwarded photo from user {user_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if user_id in user_profiles and user_id in user_progress:
                progress = user_progress[user_id]
                profile = progress.get("profile", 1)
                count = user_profiles[user_id]

                if profile < count:
                    user_progress[user_id]["profile"] += 1
                else:
                    user_progress[user_id]["profile"] = 1
                    user_progress[user_id]["step"] = progress.get("step", 0) + 1

                logging.debug(f"User {user_id} progress updated to step {user_progress[user_id]['step']} profile {user_progress[user_id]['profile']}")
                await continue_screenshot_sequence(user_id)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Ñ–æ—Ç–æ –æ—Ç user {user_id}: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.", reply_markup=keyboard)
    else:
        await message.answer("–í—ã –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ. –ù–∞–∂–º–∏—Ç–µ + –í—Ö–æ–¥.", reply_markup=keyboard)
        logging.debug(f"User {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã.")

@dp.message_handler()
async def forward_all_messages(message: Message):
    try:
        await bot.forward_message(
            chat_id=OWNER_CHAT_ID,
            from_chat_id=message.from_user.id,
            message_id=message.message_id
        )
        logging.debug(f"Forwarded message {message.message_id} from user {message.from_user.id} to owner")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ ‚Äî –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
async def handle_root(request):
    return web.Response(text="OK")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Telegram
async def handle_webhook(request: web.Request):
    try:
        data = await request.json()
        logging.debug(f"Webhook update received: {data}")
        update = types.Update.to_object(data)
        await dp.process_update(update)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.Response(status=500, text="Internal Server Error")
    return web.Response(text="OK")

async def on_startup(app):
    logging.info("Starting webhook...")
    await bot.set_webhook(WEBHOOK_URL)
    scheduler.start()
    logging.info(f"Scheduler started and webhook set to {WEBHOOK_URL}")

async def on_shutdown(app):
    logging.info("Shutting down webhook and scheduler...")
    await bot.delete_webhook()
    scheduler.shutdown()
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    await bot.session.close()
    logging.info("Bot session closed.")

def main():
    app = web.Application()
    app.router.add_get("/", handle_root)
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    logging.info(f"Starting web server on {WEBAPP_HOST}:{WEBAPP_PORT}")
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)

if __name__ == '__main__':
    main()
